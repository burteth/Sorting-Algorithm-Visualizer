/**
 * Welcome to @reach/slider!
 *
 * A UI input component where the user selects a value from within a given
 * range. A Slider has a handle that can be moved along a track to change its
 * value. When the user's mouse or focus is on the Slider's handle, the value
 * can be incremented with keyboard controls.
 *
 * Random thoughts/notes:
 *  - Currently testing this against the behavior of the native input range
 *    element to get our slider on par. We'll explore animated and multi-handle
 *    sliders next.
 *  - We may want to research some use cases for reversed sliders in RTL
 *    languages if that's a thing
 *
 * @see Docs     https://reacttraining.com/reach-ui/slider
 * @see Source   https://github.com/reach/reach-ui/tree/master/packages/slider
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#slider
 * @see          https://github.com/Stanko/aria-progress-range-slider
 * @see          http://www.oaa-accessibility.org/examplep/slider1/
 */
import React from "react";
export declare type SliderAlignment = "center" | "contain";
export declare enum SliderOrientation {
    Horizontal = "horizontal",
    Vertical = "vertical"
}
export declare enum SliderHandleAlignment {
    Center = "center",
    Contain = "contain"
}
export declare const SLIDER_ORIENTATION_HORIZONTAL = SliderOrientation.Horizontal;
export declare const SLIDER_ORIENTATION_VERTICAL = SliderOrientation.Vertical;
export declare const SLIDER_HANDLE_ALIGN_CENTER = SliderHandleAlignment.Center;
export declare const SLIDER_HANDLE_ALIGN_CONTAIN = SliderHandleAlignment.Contain;
/**
 * Slider
 *
 * @see Docs https://reacttraining.com/reach-ui/slider#slider
 */
export declare const Slider: React.ForwardRefExoticComponent<Pick<React.HTMLAttributes<HTMLDivElement>, "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "slot" | "spellCheck" | "style" | "tabIndex" | "title" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture"> & {
    /**
     * `Slider` can accept `SliderMarker` children to enhance display of specific
     * values along the track.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-children
     */
    children?: React.ReactNode;
    /**
     * The defaultValue is used to set an initial value for an uncontrolled
     * Slider.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-defaultvalue
     */
    defaultValue?: number | undefined;
    /**
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-disabled
     */
    disabled?: boolean | undefined;
    /**
     * Whether or not the slider should be disabled from user interaction.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-value
     */
    value?: number | undefined;
    /**
     * A function used to set human readable value text based on the slider's
     * current value.
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-getvaluetext
     */
    getValueText?(value: number): string;
    /**
     * When set to `center`, the slider's handle will be positioned directly
     * centered over the slider's curremt value on the track. This means that when
     * the slider is at its min or max value, a visiable slider handle will extend
     * beyond the width (or height in vertical mode) of the slider track. When set
     * to `contain`, the slider handle will always be contained within the bounds
     * of the track, meaning its position will be slightly offset from the actual
     * value depending on where it sits on the track.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-handlealignment
     */
    handleAlignment?: "center" | "contain" | undefined;
    /**
     * The maximum value of the slider. Defaults to `100`.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-max
     */
    max?: number | undefined;
    /**
     * The minimum value of the slider. Defaults to `0`.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-min
     */
    min?: number | undefined;
    /**
     * If the slider is used as a form input, it should accept a `name` prop to
     * identify its value in context of the form.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-name
     */
    name?: string | undefined;
    /**
     * Callback that fires when the slider value changes. When the `value` prop is
     * set, the Slider state becomes controlled and `onChange` must be used to
     * update the value in response to user interaction.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-onchange
     */
    onChange?(newValue: number, props?: {
        min?: number | undefined;
        max?: number | undefined;
        handlePosition?: string | undefined;
    } | undefined): void;
    onPointerMove?(event: PointerEvent): void;
    /**
     * Sets the slider to horizontal or vertical mode.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-orientation
     */
    orientation?: SliderOrientation | undefined;
    /**
     * The step attribute is a number that specifies the granularity that the
     * value must adhere to as it changes. Step sets minimum intervals of change,
     * creating a "snap" effect when the handle is moved along the track.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-step
     */
    step?: number | undefined;
} & React.RefAttributes<HTMLDivElement>>;
/**
 * @see Docs https://reacttraining.com/reach-ui/slider#slider-props
 */
export declare type SliderProps = Omit<React.HTMLAttributes<HTMLDivElement>, "onChange" | "onPointerMove"> & {
    /**
     * `Slider` can accept `SliderMarker` children to enhance display of specific
     * values along the track.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-children
     */
    children?: React.ReactNode;
    /**
     * The defaultValue is used to set an initial value for an uncontrolled
     * Slider.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-defaultvalue
     */
    defaultValue?: number;
    /**
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-disabled
     */
    disabled?: boolean;
    /**
     * Whether or not the slider should be disabled from user interaction.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-value
     */
    value?: number;
    /**
     * A function used to set human readable value text based on the slider's
     * current value.
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-getvaluetext
     */
    getValueText?(value: number): string;
    /**
     * When set to `center`, the slider's handle will be positioned directly
     * centered over the slider's curremt value on the track. This means that when
     * the slider is at its min or max value, a visiable slider handle will extend
     * beyond the width (or height in vertical mode) of the slider track. When set
     * to `contain`, the slider handle will always be contained within the bounds
     * of the track, meaning its position will be slightly offset from the actual
     * value depending on where it sits on the track.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-handlealignment
     */
    handleAlignment?: "center" | "contain" | SliderAlignment;
    /**
     * The maximum value of the slider. Defaults to `100`.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-max
     */
    max?: number;
    /**
     * The minimum value of the slider. Defaults to `0`.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-min
     */
    min?: number;
    /**
     * If the slider is used as a form input, it should accept a `name` prop to
     * identify its value in context of the form.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-name
     */
    name?: string;
    /**
     * Callback that fires when the slider value changes. When the `value` prop is
     * set, the Slider state becomes controlled and `onChange` must be used to
     * update the value in response to user interaction.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-onchange
     */
    onChange?(newValue: number, props?: {
        min?: number;
        max?: number;
        handlePosition?: string;
    }): void;
    onPointerMove?(event: PointerEvent): void;
    /**
     * Sets the slider to horizontal or vertical mode.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-orientation
     */
    orientation?: SliderOrientation;
    /**
     * The step attribute is a number that specifies the granularity that the
     * value must adhere to as it changes. Step sets minimum intervals of change,
     * creating a "snap" effect when the handle is moved along the track.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slider-step
     */
    step?: number;
};
export default Slider;
/**
 * SliderInput
 *
 * The parent component of the slider interface. This is a lower level component
 * if you need more control over styles or rendering the slider's inner
 * components.
 *
 * @see Docs https://reacttraining.com/reach-ui/slider#sliderinput
 */
export declare const SliderInput: React.ForwardRefExoticComponent<Pick<SliderProps, "onChange" | "onPointerMove" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "slot" | "spellCheck" | "style" | "tabIndex" | "title" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "step" | "disabled" | "value" | "getValueText" | "handleAlignment" | "max" | "min" | "name" | "orientation"> & {
    /**
     * Slider expects `<SliderTrack>` as its child; The track will accept all
     * additional slider sub-components as children. It can also accept a
     * function/render prop as its child to expose some of its internal state
     * variables.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#sliderinput-children
     */
    children: string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | SliderChildrenRender | null | undefined;
} & React.RefAttributes<HTMLDivElement>>;
/**
 * @see Docs https://reacttraining.com/reach-ui/slider#sliderinput-props
 */
export declare type SliderInputProps = Omit<SliderProps, "children"> & {
    /**
     * Slider expects `<SliderTrack>` as its child; The track will accept all
     * additional slider sub-components as children. It can also accept a
     * function/render prop as its child to expose some of its internal state
     * variables.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#sliderinput-children
     */
    children: React.ReactNode | SliderChildrenRender;
};
/**
 * SliderTrack
 *
 * @see Docs https://reacttraining.com/reach-ui/slider#slidertrack
 */
export declare const SliderTrack: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {
    /**
     * `SliderTrack` expects `<SliderHandle>`, at minimum, for the Slider to
     * function. All other Slider subcomponents should be passed as children
     * inside the `SliderTrack`.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slidertrack-children
     */
    children: React.ReactNode;
} & React.RefAttributes<HTMLDivElement>>;
/**
 * @see Docs https://reacttraining.com/reach-ui/slider#slidertrack-props
 */
export declare type SliderTrackProps = React.HTMLAttributes<HTMLDivElement> & {
    /**
     * `SliderTrack` expects `<SliderHandle>`, at minimum, for the Slider to
     * function. All other Slider subcomponents should be passed as children
     * inside the `SliderTrack`.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slidertrack-children
     */
    children: React.ReactNode;
};
/**
 * SliderTrackHighlight
 *
 * The (typically) highlighted portion of the track that represents the space
 * between the slider's `min` value and its current value.
 *
 * TODO: Consider renaming to `SliderTrackProgress`
 *
 * @see Docs https://reacttraining.com/reach-ui/slider#slidertrackhighlight
 */
export declare const SliderTrackHighlight: React.ForwardRefExoticComponent<SliderTrackHighlightProps & React.RefAttributes<HTMLDivElement>>;
/**
 * `SliderTrackHighlight` accepts any props that a HTML div component accepts.
 * `SliderTrackHighlight` will not accept or render any children.
 *
 * @see Docs https://reacttraining.com/reach-ui/slider#slidertrackhighlight-props
 */
export declare type SliderTrackHighlightProps = React.HTMLAttributes<HTMLDivElement>;
/**
 * SliderHandle
 *
 * The handle that the user drags along the track to set the slider value.
 *
 * @see Docs https://reacttraining.com/reach-ui/slider#sliderhandle
 */
export declare const SliderHandle: React.ForwardRefExoticComponent<SliderHandleProps & React.RefAttributes<HTMLDivElement>>;
/**
 * `SliderTrackHighlight` accepts any props that a HTML div component accepts.
 *
 * @see Docs https://reacttraining.com/reach-ui/slider#sliderhandle-props
 */
export declare type SliderHandleProps = React.HTMLAttributes<HTMLDivElement>;
/**
 * SliderMarker
 *
 * A fixed value marker. These can be used to illustrate a range of steps or
 * highlight important points along the slider track.
 *
 * @see Docs https://reacttraining.com/reach-ui/slider#slidermarker
 */
export declare const SliderMarker: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {
    /**
     * The value to denote where the marker should appear along the track.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slidermarker-value
     */
    value: number;
} & React.RefAttributes<HTMLDivElement>>;
/**
 * @see Docs https://reacttraining.com/reach-ui/slider#slidermarker-props
 */
export declare type SliderMarkerProps = React.HTMLAttributes<HTMLDivElement> & {
    /**
     * The value to denote where the marker should appear along the track.
     *
     * @see Docs https://reacttraining.com/reach-ui/slider#slidermarker-value
     */
    value: number;
};
declare type SliderChildrenRender = (props: {
    hasFocus?: boolean;
    id?: string | undefined;
    sliderId?: string | undefined;
    max?: number;
    min?: number;
    value?: number;
    valueText?: string | undefined;
}) => JSX.Element;
