{"version":3,"file":"slider.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/slider!\n *\n * A UI input component where the user selects a value from within a given\n * range. A Slider has a handle that can be moved along a track to change its\n * value. When the user's mouse or focus is on the Slider's handle, the value\n * can be incremented with keyboard controls.\n *\n * Random thoughts/notes:\n *  - Currently testing this against the behavior of the native input range\n *    element to get our slider on par. We'll explore animated and multi-handle\n *    sliders next.\n *  - We may want to research some use cases for reversed sliders in RTL\n *    languages if that's a thing\n *\n * @see Docs     https://reacttraining.com/reach-ui/slider\n * @see Source   https://github.com/reach/reach-ui/tree/master/packages/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#slider\n * @see          https://github.com/Stanko/aria-progress-range-slider\n * @see          http://www.oaa-accessibility.org/examplep/slider1/\n */\n\nimport React, {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport warning from \"warning\";\nimport { useId } from \"@reach/auto-id\";\nimport {\n  checkStyles,\n  createNamedContext,\n  getOwnerDocument,\n  isFunction,\n  makeId,\n  useForkedRef,\n  useIsomorphicLayoutEffect,\n  wrapEvent,\n} from \"@reach/utils\";\n\nexport type SliderAlignment = \"center\" | \"contain\";\nexport enum SliderOrientation {\n  Horizontal = \"horizontal\",\n  Vertical = \"vertical\",\n}\nexport enum SliderHandleAlignment {\n  // Handle is centered directly over the current value marker\n  Center = \"center\",\n  // Handle is contained within the bounds of the track, offset slightly from\n  // the value's center mark to accommodate\n  Contain = \"contain\",\n}\n\n// TODO: Remove in 1.0, maybe?\nexport const SLIDER_ORIENTATION_HORIZONTAL = SliderOrientation.Horizontal;\nexport const SLIDER_ORIENTATION_VERTICAL = SliderOrientation.Vertical;\nexport const SLIDER_HANDLE_ALIGN_CENTER = SliderHandleAlignment.Center;\nexport const SLIDER_HANDLE_ALIGN_CONTAIN = SliderHandleAlignment.Contain;\n\nconst SliderContext = createNamedContext<ISliderContext>(\n  \"SliderContext\",\n  {} as ISliderContext\n);\nconst useSliderContext = () => useContext(SliderContext);\n\n// These proptypes are shared between the composed SliderInput component and the\n// simplified Slider\nconst sliderPropTypes = {\n  defaultValue: PropTypes.number,\n  disabled: PropTypes.bool,\n  getValueText: PropTypes.func,\n  handleAlignment: PropTypes.oneOf([\n    SliderHandleAlignment.Center,\n    SliderHandleAlignment.Contain,\n  ]),\n  min: PropTypes.number,\n  max: PropTypes.number,\n  name: PropTypes.string,\n  orientation: PropTypes.oneOf([\n    SliderOrientation.Horizontal,\n    SliderOrientation.Vertical,\n  ]),\n  onChange: PropTypes.func,\n  step: PropTypes.number,\n  value: PropTypes.number,\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Slider\n *\n * @see Docs https://reacttraining.com/reach-ui/slider#slider\n */\nexport const Slider = forwardRef<HTMLDivElement, SliderProps>(function Slider(\n  { children, ...props },\n  forwardedRef\n) {\n  return (\n    <SliderInput ref={forwardedRef} data-reach-slider=\"\" {...props}>\n      <SliderTrack>\n        <SliderTrackHighlight />\n        <SliderHandle />\n        {children}\n      </SliderTrack>\n    </SliderInput>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/slider#slider-props\n */\nexport type SliderProps = Omit<\n  React.HTMLAttributes<HTMLDivElement>,\n  \"onChange\" | \"onPointerMove\"\n> & {\n  /**\n   * `Slider` can accept `SliderMarker` children to enhance display of specific\n   * values along the track.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-children\n   */\n  children?: React.ReactNode;\n  /**\n   * The defaultValue is used to set an initial value for an uncontrolled\n   * Slider.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-defaultvalue\n   */\n  defaultValue?: number;\n  /**\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-disabled\n   */\n  disabled?: boolean;\n  /**\n   * Whether or not the slider should be disabled from user interaction.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-value\n   */\n  value?: number;\n  /**\n   * A function used to set human readable value text based on the slider's\n   * current value.\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-getvaluetext\n   */\n  getValueText?(value: number): string;\n  /**\n   * When set to `center`, the slider's handle will be positioned directly\n   * centered over the slider's curremt value on the track. This means that when\n   * the slider is at its min or max value, a visiable slider handle will extend\n   * beyond the width (or height in vertical mode) of the slider track. When set\n   * to `contain`, the slider handle will always be contained within the bounds\n   * of the track, meaning its position will be slightly offset from the actual\n   * value depending on where it sits on the track.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-handlealignment\n   */\n  handleAlignment?: \"center\" | \"contain\" | SliderAlignment;\n  /**\n   * The maximum value of the slider. Defaults to `100`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-max\n   */\n  max?: number;\n  /**\n   * The minimum value of the slider. Defaults to `0`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-min\n   */\n  min?: number;\n  /**\n   * If the slider is used as a form input, it should accept a `name` prop to\n   * identify its value in context of the form.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-name\n   */\n  name?: string;\n  /**\n   * Callback that fires when the slider value changes. When the `value` prop is\n   * set, the Slider state becomes controlled and `onChange` must be used to\n   * update the value in response to user interaction.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-onchange\n   */\n  onChange?(\n    newValue: number,\n    props?: {\n      min?: number;\n      max?: number;\n      handlePosition?: string;\n    }\n  ): void;\n  onPointerMove?(event: PointerEvent): void;\n  /**\n   * Sets the slider to horizontal or vertical mode.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-orientation\n   */\n  orientation?: SliderOrientation;\n  /**\n   * The step attribute is a number that specifies the granularity that the\n   * value must adhere to as it changes. Step sets minimum intervals of change,\n   * creating a \"snap\" effect when the handle is moved along the track.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slider-step\n   */\n  step?: number;\n};\n\nif (__DEV__) {\n  Slider.displayName = \"Slider\";\n  Slider.propTypes = {\n    ...sliderPropTypes,\n    children: PropTypes.node,\n  };\n}\n\nexport default Slider;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * SliderInput\n *\n * The parent component of the slider interface. This is a lower level component\n * if you need more control over styles or rendering the slider's inner\n * components.\n *\n * @see Docs https://reacttraining.com/reach-ui/slider#sliderinput\n */\nexport const SliderInput = forwardRef<HTMLDivElement, SliderInputProps>(\n  function SliderInput(\n    {\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-valuetext\": ariaValueText,\n      defaultValue,\n      disabled = false,\n      value: controlledValue,\n      getValueText,\n      handleAlignment = SliderHandleAlignment.Center,\n      max = 100,\n      min = 0,\n      name,\n      onChange,\n      onKeyDown,\n      onPointerDown,\n      onPointerMove,\n      onPointerUp,\n      orientation = SliderOrientation.Horizontal,\n      step: stepProp,\n      children,\n      ...rest\n    },\n    forwardedRef\n  ) {\n    // Verify that the component is either controlled or uncontrolled throughout\n    // its lifecycle\n    const { current: isControlled } = useRef(controlledValue != null);\n\n    warning(\n      !(isControlled && controlledValue == null),\n      \"Slider is changing from controlled to uncontrolled. Slider should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Slider for the lifetime of the component. Check the `value` prop being passed in.\"\n    );\n\n    warning(\n      !(!isControlled && controlledValue != null),\n      \"Slider is changing from uncontrolled to controlled. Slider should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Slider for the lifetime of the component. Check the `value` prop being passed in.\"\n    );\n\n    const id = useId(rest.id);\n\n    const trackRef: TrackRef = useRef(null);\n    const handleRef: HandleRef = useRef(null);\n    const sliderRef: SliderRef = useRef(null);\n    const ref = useForkedRef(sliderRef, forwardedRef);\n\n    const [hasFocus, setHasFocus] = useState(false);\n    const [isPointerDown, setPointerDown] = useState(false);\n    const [internalValue, setValue] = useState(defaultValue || min);\n\n    const { ref: x, ...handleDimensions } = useDimensions(handleRef);\n\n    const _value = isControlled ? (controlledValue as number) : internalValue;\n    const value = getAllowedValue(_value, min, max);\n    const trackPercent = valueToPercent(value, min, max);\n    const isVertical = orientation === SliderOrientation.Vertical;\n    const step = stepProp || 1;\n\n    const handleSize = isVertical\n      ? handleDimensions.height\n      : handleDimensions.width;\n\n    const handlePosition = `calc(${trackPercent}% - ${\n      handleAlignment === SliderHandleAlignment.Center\n        ? `${handleSize}px / 2`\n        : `${handleSize}px * ${trackPercent * 0.01}`\n    })`;\n\n    const updateValue = useCallback(\n      function updateValue(newValue) {\n        if (!isControlled) {\n          setValue(newValue);\n        }\n        if (onChange) {\n          onChange(newValue, { min, max, handlePosition });\n        }\n      },\n      [handlePosition, isControlled, max, min, onChange]\n    );\n\n    const getNewValueFromPointer = useCallback(\n      (event: React.PointerEvent | PointerEvent) => {\n        if (trackRef.current) {\n          const {\n            left,\n            width,\n            bottom,\n            height,\n          } = trackRef.current.getBoundingClientRect();\n          const { clientX, clientY } = event;\n          let diff = isVertical ? bottom - clientY : clientX - left;\n          let percent = diff / (isVertical ? height : width);\n          let newValue = percentToValue(percent, min, max);\n\n          if (step) {\n            newValue = roundValueToStep(newValue, step);\n          }\n          newValue = getAllowedValue(newValue, min, max);\n          return newValue;\n        }\n        return null;\n      },\n      [isVertical, max, min, step]\n    );\n\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#slider_kbd_interaction\n    const handleKeyDown = wrapEvent(onKeyDown, event => {\n      let flag = false;\n      let newValue;\n      const tenSteps = (max - min) / 10;\n      const keyStep = stepProp || (max - min) / 100;\n\n      switch (event.key) {\n        // Decrease the value of the slider by one step.\n        case \"ArrowLeft\":\n        case \"ArrowDown\":\n          newValue = value - keyStep;\n          flag = true;\n          break;\n        // Increase the value of the slider by one step\n        case \"ArrowRight\":\n        case \"ArrowUp\":\n          newValue = value + keyStep;\n          flag = true;\n          break;\n        // Decrement the slider by an amount larger than the step change made by\n        // `ArrowDown`.\n        case \"PageDown\":\n          newValue = value - tenSteps;\n          flag = true;\n          break;\n        // Increment the slider by an amount larger than the step change made by\n        // `ArrowUp`.\n        case \"PageUp\":\n          newValue = value + tenSteps;\n          flag = true;\n          break;\n        // Set the slider to the first allowed value in its range.\n        case \"Home\":\n          newValue = min;\n          flag = true;\n          break;\n        // Set the slider to the last allowed value in its range.\n        case \"End\":\n          newValue = max;\n          flag = true;\n          break;\n        default:\n          return;\n      }\n\n      if (flag) {\n        event.preventDefault();\n        newValue = roundValueToStep(newValue, keyStep);\n        newValue = getAllowedValue(newValue, min, max);\n        updateValue(newValue);\n      }\n    });\n\n    const handlePointerDown = wrapEvent(onPointerDown, event => {\n      event.preventDefault();\n      if (disabled) {\n        if (isPointerDown) setPointerDown(false);\n        return;\n      }\n      if (sliderRef.current && handleRef.current) {\n        setPointerDown(true);\n        const newValue = getNewValueFromPointer(event);\n        sliderRef.current.setPointerCapture &&\n          sliderRef.current.setPointerCapture(event.pointerId);\n        if (newValue != null && newValue !== value) {\n          updateValue(newValue);\n        }\n        handleRef.current.focus();\n      }\n    });\n\n    const handlePointerUp = wrapEvent(onPointerUp, function(event) {\n      if (sliderRef.current && event.pointerId) {\n        sliderRef.current.releasePointerCapture &&\n          sliderRef.current.releasePointerCapture(event.pointerId);\n      }\n      setPointerDown(false);\n    });\n\n    const valueText = getValueText ? getValueText(value) : ariaValueText;\n\n    const trackHighlightStyle = isVertical\n      ? {\n          width: `100%`,\n          height: `${trackPercent}%`,\n          bottom: 0,\n        }\n      : {\n          width: `${trackPercent}%`,\n          height: `100%`,\n          left: 0,\n        };\n\n    const ctx: ISliderContext = {\n      ariaLabel,\n      ariaLabelledBy,\n      handleDimensions,\n      handlePosition,\n      handleRef,\n      hasFocus,\n      onKeyDown,\n      onPointerDown,\n      onPointerMove,\n      onPointerUp,\n      onHandleKeyDown: handleKeyDown,\n      setHasFocus,\n      sliderId: id,\n      sliderMax: max,\n      sliderMin: min,\n      value,\n      valueText,\n      disabled: !!disabled,\n      isVertical,\n      orientation,\n      sliderStep: step,\n      trackPercent,\n      trackRef,\n      trackHighlightStyle,\n      updateValue,\n    };\n\n    useEffect(() => {\n      const ownerDocument = getOwnerDocument(sliderRef.current) || document;\n      const handlePointerMove = wrapEvent(onPointerMove, event => {\n        const newValue = getNewValueFromPointer(event);\n        if (newValue !== value) {\n          updateValue(newValue);\n        }\n      });\n\n      if (isPointerDown) {\n        ownerDocument.addEventListener(\"pointermove\", handlePointerMove);\n      }\n\n      return () => {\n        ownerDocument.removeEventListener(\"pointermove\", handlePointerMove);\n      };\n    }, [\n      getNewValueFromPointer,\n      isPointerDown,\n      onPointerMove,\n      updateValue,\n      value,\n    ]);\n\n    useEffect(() => checkStyles(\"slider\"), []);\n\n    return (\n      <SliderContext.Provider value={ctx}>\n        <div\n          {...rest}\n          ref={ref}\n          data-reach-slider-input=\"\"\n          data-disabled={disabled ? \"\" : undefined}\n          data-orientation={orientation}\n          tabIndex={-1}\n          onPointerDown={handlePointerDown}\n          onPointerUp={handlePointerUp}\n        >\n          {isFunction(children)\n            ? children({\n                hasFocus,\n                id,\n                max,\n                min,\n                value,\n                valueText,\n              })\n            : children}\n          {name && (\n            // If the slider is used in a form we'll need an input field to\n            // capture the value. We'll assume this when the component is given a\n            // form field name (A `name` prop doesn't really make sense in any\n            // other context).\n            <input\n              type=\"hidden\"\n              value={value}\n              name={name}\n              id={id && makeId(\"input\", id)}\n            />\n          )}\n        </div>\n      </SliderContext.Provider>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/slider#sliderinput-props\n */\nexport type SliderInputProps = Omit<SliderProps, \"children\"> & {\n  /**\n   * Slider expects `<SliderTrack>` as its child; The track will accept all\n   * additional slider sub-components as children. It can also accept a\n   * function/render prop as its child to expose some of its internal state\n   * variables.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#sliderinput-children\n   */\n  children: React.ReactNode | SliderChildrenRender;\n};\n\nif (__DEV__) {\n  SliderInput.displayName = \"SliderInput\";\n  SliderInput.propTypes = {\n    ...sliderPropTypes,\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * SliderTrack\n *\n * @see Docs https://reacttraining.com/reach-ui/slider#slidertrack\n */\nexport const SliderTrack = forwardRef<HTMLDivElement, SliderTrackProps>(\n  function SliderTrack({ children, style = {}, ...props }, forwardedRef) {\n    const { disabled, orientation, trackRef } = useSliderContext();\n    const ref = useForkedRef(trackRef, forwardedRef);\n\n    return (\n      <div\n        ref={ref}\n        style={{ ...style, position: \"relative\" }}\n        {...props}\n        data-reach-slider-track=\"\"\n        data-disabled={disabled ? \"\" : undefined}\n        data-orientation={orientation}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/slider#slidertrack-props\n */\nexport type SliderTrackProps = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * `SliderTrack` expects `<SliderHandle>`, at minimum, for the Slider to\n   * function. All other Slider subcomponents should be passed as children\n   * inside the `SliderTrack`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slidertrack-children\n   */\n  children: React.ReactNode;\n};\n\nif (__DEV__) {\n  SliderTrack.displayName = \"SliderTrack\";\n  SliderTrack.propTypes = {\n    children: PropTypes.node.isRequired,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * SliderTrackHighlight\n *\n * The (typically) highlighted portion of the track that represents the space\n * between the slider's `min` value and its current value.\n *\n * TODO: Consider renaming to `SliderTrackProgress`\n *\n * @see Docs https://reacttraining.com/reach-ui/slider#slidertrackhighlight\n */\nexport const SliderTrackHighlight = forwardRef<\n  HTMLDivElement,\n  SliderTrackHighlightProps\n>(function SliderTrackHighlight(\n  { children, style = {}, ...props },\n  forwardedRef\n) {\n  let { disabled, orientation, trackHighlightStyle } = useSliderContext();\n  return (\n    <div\n      ref={forwardedRef}\n      style={{ position: \"absolute\", ...trackHighlightStyle, ...style }}\n      {...props}\n      data-reach-slider-track-highlight=\"\"\n      data-disabled={disabled ? \"\" : undefined}\n      data-orientation={orientation}\n    />\n  );\n});\n\n/**\n * `SliderTrackHighlight` accepts any props that a HTML div component accepts.\n * `SliderTrackHighlight` will not accept or render any children.\n *\n * @see Docs https://reacttraining.com/reach-ui/slider#slidertrackhighlight-props\n */\nexport type SliderTrackHighlightProps = React.HTMLAttributes<HTMLDivElement>;\n\nif (__DEV__) {\n  SliderTrackHighlight.displayName = \"SliderTrackHighlight\";\n  SliderTrackHighlight.propTypes = {};\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * SliderHandle\n *\n * The handle that the user drags along the track to set the slider value.\n *\n * @see Docs https://reacttraining.com/reach-ui/slider#sliderhandle\n */\nexport const SliderHandle = forwardRef<HTMLDivElement, SliderHandleProps>(\n  function SliderHandle(\n    {\n      // min,\n      // max,\n      onBlur,\n      onFocus,\n      style = {},\n      onKeyDown,\n      ...props\n    },\n    forwardedRef\n  ) {\n    const {\n      ariaLabel,\n      ariaLabelledBy,\n      disabled,\n      handlePosition,\n      handleRef,\n      isVertical,\n      onHandleKeyDown,\n      orientation,\n      setHasFocus,\n      sliderMin,\n      sliderMax,\n      value,\n      valueText,\n    } = useSliderContext();\n\n    const ref = useForkedRef(handleRef, forwardedRef);\n\n    return (\n      <div\n        aria-disabled={disabled || undefined}\n        // If the slider has a visible label, it is referenced by\n        // `aria-labelledby` on the slider element. Otherwise, the slider\n        // element has a label provided by `aria-label`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#slider_roles_states_props\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabel ? undefined : ariaLabelledBy}\n        // If the slider is vertically oriented, it has `aria-orientation` set\n        // to vertical. The default value of `aria-orientation` for a slider is\n        // horizontal.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#slider_roles_states_props\n        aria-orientation={orientation}\n        // The slider element has the `aria-valuemax` property set to a decimal\n        // value representing the maximum allowed value of the slider.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#slider_roles_states_props\n        aria-valuemax={sliderMax}\n        // The slider element has the `aria-valuemin` property set to a decimal\n        // value representing the minimum allowed value of the slider.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#slider_roles_states_props\n        aria-valuemin={sliderMin}\n        // The slider element has the `aria-valuenow` property set to a decimal\n        // value representing the current value of the slider.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#slider_roles_states_props\n        aria-valuenow={value}\n        // If the value of `aria-valuenow` is not user-friendly, e.g., the day\n        // of the week is represented by a number, the `aria-valuetext` property\n        // is set to a string that makes the slider value understandable, e.g.,\n        // \"Monday\".\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#slider_roles_states_props\n        aria-valuetext={valueText}\n        // The element serving as the focusable slider control has role\n        // `slider`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#slider_roles_states_props\n        role=\"slider\"\n        tabIndex={disabled ? -1 : 0}\n        {...props}\n        data-reach-slider-handle=\"\"\n        ref={ref}\n        onBlur={wrapEvent(onBlur, () => {\n          setHasFocus(false);\n        })}\n        onFocus={wrapEvent(onFocus, () => {\n          setHasFocus(true);\n        })}\n        onKeyDown={wrapEvent(onKeyDown, onHandleKeyDown)}\n        style={{\n          position: \"absolute\",\n          ...(isVertical\n            ? { bottom: handlePosition }\n            : { left: handlePosition }),\n          ...style,\n        }}\n      />\n    );\n  }\n);\n\n/**\n * `SliderTrackHighlight` accepts any props that a HTML div component accepts.\n *\n * @see Docs https://reacttraining.com/reach-ui/slider#sliderhandle-props\n */\nexport type SliderHandleProps = React.HTMLAttributes<HTMLDivElement>;\n\nif (__DEV__) {\n  SliderHandle.displayName = \"SliderHandle\";\n  SliderHandle.propTypes = {};\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * SliderMarker\n *\n * A fixed value marker. These can be used to illustrate a range of steps or\n * highlight important points along the slider track.\n *\n * @see Docs https://reacttraining.com/reach-ui/slider#slidermarker\n */\nexport const SliderMarker = forwardRef<HTMLDivElement, SliderMarkerProps>(\n  function SliderMarker(\n    { children, style = {}, value, ...props },\n    forwardedRef\n  ) {\n    const {\n      disabled,\n      isVertical,\n      orientation,\n      sliderMin,\n      sliderMax,\n      value: sliderValue,\n    } = useSliderContext();\n\n    let inRange = !(value < sliderMin || value > sliderMax);\n    let absoluteStartPosition = `${valueToPercent(\n      value,\n      sliderMin,\n      sliderMax\n    )}%`;\n\n    let state =\n      value < sliderValue\n        ? \"under-value\"\n        : value === sliderValue\n        ? \"at-value\"\n        : \"over-value\";\n\n    return inRange ? (\n      <div\n        ref={forwardedRef}\n        style={{\n          position: \"absolute\",\n          ...(isVertical\n            ? { bottom: absoluteStartPosition }\n            : { left: absoluteStartPosition }),\n          ...style,\n        }}\n        {...props}\n        data-reach-slider-marker=\"\"\n        data-disabled={disabled ? \"\" : undefined}\n        data-orientation={orientation}\n        data-state={state}\n        data-value={value}\n        children={children}\n      />\n    ) : null;\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/slider#slidermarker-props\n */\nexport type SliderMarkerProps = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * The value to denote where the marker should appear along the track.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/slider#slidermarker-value\n   */\n  value: number;\n};\n\nif (__DEV__) {\n  SliderMarker.displayName = \"SliderMarker\";\n  SliderMarker.propTypes = {\n    value: PropTypes.number.isRequired,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\nfunction getAllowedValue(val: number, min: number, max: number) {\n  return val > max ? max : val < min ? min : val;\n}\n\nfunction makeValuePrecise(value: number, step: number) {\n  const stepDecimalPart = step.toString().split(\".\")[1];\n  const stepPrecision = stepDecimalPart ? stepDecimalPart.length : 0;\n  return Number(value.toFixed(stepPrecision));\n}\n\nfunction percentToValue(percent: number, min: number, max: number) {\n  return (max - min) * percent + min;\n}\n\nfunction roundValueToStep(value: number, step: number) {\n  return makeValuePrecise(Math.round(value / step) * step, step);\n}\n\nfunction useDimensions(ref: React.RefObject<HTMLElement | null>) {\n  const [{ width, height }, setDimensions] = useState({ width: 0, height: 0 });\n  // Many existing `useDimensions` type hooks will use `getBoundingClientRect`\n  // getBoundingClientRect does not work here when borders are applied.\n  // getComputedStyle is not as performant so we may want to create a utility to\n  // check for any conflicts with box sizing first and only use\n  // `getComputedStyle` if neccessary.\n  /* const { width, height } = ref.current\n    ? ref.current.getBoundingClientRect()\n    : 0; */\n\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current) {\n      const { height: _newHeight, width: _newWidth } = window.getComputedStyle(\n        ref.current\n      );\n      let newHeight = parseFloat(_newHeight);\n      let newWidth = parseFloat(_newWidth);\n\n      if (newHeight !== height || newWidth !== width) {\n        setDimensions({ height: newHeight, width: newWidth });\n      }\n    }\n  }, [ref, width, height]);\n  return { ref, width, height };\n}\n\nfunction valueToPercent(value: number, min: number, max: number) {\n  return ((value - min) * 100) / (max - min);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype TrackRef = React.RefObject<HTMLDivElement | null>;\ntype HandleRef = React.RefObject<HTMLDivElement | null>;\ntype SliderRef = React.RefObject<HTMLDivElement | null>;\n\ninterface ISliderContext {\n  ariaLabel: string | undefined;\n  ariaLabelledBy: string | undefined;\n  handleDimensions: {\n    width: number;\n    height: number;\n  };\n  handlePosition: string;\n  handleRef: HandleRef;\n  hasFocus: boolean;\n  onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onPointerDown?: (event: React.PointerEvent<HTMLDivElement>) => void;\n  onPointerMove?: (event: PointerEvent) => void;\n  onPointerUp?: (event: React.PointerEvent<HTMLDivElement>) => void;\n  onHandleKeyDown: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  setHasFocus: React.Dispatch<React.SetStateAction<boolean>>;\n  sliderId: string | undefined;\n  sliderMax: number;\n  sliderMin: number;\n  value: number;\n  valueText: string | undefined;\n  disabled: boolean;\n  isVertical: boolean;\n  orientation: SliderOrientation;\n  sliderStep: number;\n  trackPercent: number;\n  trackRef: TrackRef;\n  trackHighlightStyle: React.CSSProperties;\n  updateValue: (newValue: any) => void;\n}\n\ntype SliderChildrenRender = (props: {\n  hasFocus?: boolean;\n  id?: string | undefined;\n  sliderId?: string | undefined;\n  max?: number;\n  min?: number;\n  value?: number;\n  valueText?: string | undefined;\n}) => JSX.Element;\n"],"names":["SliderOrientation","SliderHandleAlignment","SLIDER_ORIENTATION_HORIZONTAL","Horizontal","SLIDER_ORIENTATION_VERTICAL","Vertical","SLIDER_HANDLE_ALIGN_CENTER","Center","SLIDER_HANDLE_ALIGN_CONTAIN","Contain","SliderContext","createNamedContext","useSliderContext","useContext","Slider","forwardRef","forwardedRef","children","props","React","SliderInput","ref","SliderTrack","SliderTrackHighlight","SliderHandle","ariaLabel","ariaLabelledBy","ariaValueText","defaultValue","disabled","controlledValue","value","getValueText","handleAlignment","max","min","name","onChange","onKeyDown","onPointerDown","onPointerMove","onPointerUp","orientation","stepProp","step","rest","isControlled","useRef","current","id","useId","trackRef","handleRef","sliderRef","useForkedRef","useState","hasFocus","setHasFocus","isPointerDown","setPointerDown","internalValue","setValue","handleDimensions","width","height","setDimensions","useIsomorphicLayoutEffect","window","getComputedStyle","_newWidth","newHeight","parseFloat","newWidth","useDimensions","getAllowedValue","trackPercent","valueToPercent","isVertical","handleSize","handlePosition","updateValue","useCallback","newValue","getNewValueFromPointer","event","getBoundingClientRect","percent","percentToValue","bottom","clientY","clientX","left","roundValueToStep","handleKeyDown","wrapEvent","flag","tenSteps","keyStep","key","preventDefault","handlePointerDown","setPointerCapture","pointerId","focus","handlePointerUp","releasePointerCapture","valueText","ctx","onHandleKeyDown","sliderId","sliderMax","sliderMin","sliderStep","trackHighlightStyle","useEffect","ownerDocument","getOwnerDocument","document","handlePointerMove","addEventListener","removeEventListener","checkStyles","Provider","undefined","tabIndex","isFunction","type","makeId","style","position","onBlur","onFocus","role","SliderMarker","sliderValue","inRange","absoluteStartPosition","state","val","stepDecimalPart","toString","split","Number","toFixed","length","makeValuePrecise","Math","round"],"mappings":"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"}