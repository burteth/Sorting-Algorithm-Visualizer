{"ast":null,"code":"function mergesort(i, start, end) {\n  if (end - start == 1) {}\n}\n\nfunction merge(left, right) {\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var result = [];\n\n  while (i <= len_l & j <= len_r) {\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n\n    k += 1;\n  }\n\n  while (i <= len_l) {\n    result.push(left[i]);\n    i += 1;\n  }\n\n  while (j <= len_r) {\n    result.push(right[j]);\n    j += 1;\n  }\n\n  return result;\n}\n\nexport default mergesort;\n/*\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n\n\n  var len_i = Math.floor(i.length / 2);\n\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n\nfunction test(){\n\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 20; i++) {\n    test1 = []\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1,20); j++) {\n      var num = getRandomInt(0,100)\n      test1.push(num);\n      test2.push(num);\n    }\n    test1.sort((a,b) => a-b);\n\n    console.log(mergesort(test2));\n    console.log(test1);\n    console.log(\"\");\n\n  }\n\n}\n//test()\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n*/","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["mergesort","i","start","end","merge","left","right","len_l","length","len_r","j","k","result","push"],"mappings":"AAEA,SAASA,SAAT,CAAmBC,CAAnB,EAAsBC,KAAtB,EAA6BC,GAA7B,EAAkC;AAEhC,MAAIA,GAAG,GAAGD,KAAN,IAAe,CAAnB,EAAqB,CAGpB;AAOF;;AAED,SAASE,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;AAE1B,MAAIC,KAAK,GAAGF,IAAI,CAACG,MAAL,GAAc,CAA1B;AACA,MAAIC,KAAK,GAAGH,KAAK,CAACE,MAAN,GAAe,CAA3B;AAEA,MAAIP,CAAC,GAAG,CAAR;AACA,MAAIS,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AAEA,MAAIC,MAAM,GAAG,EAAb;;AAEA,SAAOX,CAAC,IAAKM,KAAN,GAAeG,CAAC,IAAKD,KAA5B,EAAmC;AAEjC,QAAIJ,IAAI,CAACJ,CAAD,CAAJ,IAAWK,KAAK,CAACI,CAAD,CAApB,EAAyB;AACvBE,MAAAA,MAAM,CAACC,IAAP,CAAYR,IAAI,CAACJ,CAAD,CAAhB;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD,KAHD,MAGO;AACLW,MAAAA,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACI,CAAD,CAAjB;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD;;AACDC,IAAAA,CAAC,IAAI,CAAL;AACD;;AAED,SAAOV,CAAC,IAAIM,KAAZ,EAAkB;AAChBK,IAAAA,MAAM,CAACC,IAAP,CAAYR,IAAI,CAACJ,CAAD,CAAhB;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOS,CAAC,IAAID,KAAZ,EAAkB;AAChBG,IAAAA,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACI,CAAD,CAAjB;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOE,MAAP;AACD;;AAID,eAAeZ,SAAf;AAwDA","sourcesContent":["\n\nfunction mergesort(i, start, end) {\n\n  if (end - start == 1){\n\n\n  }\n\n\n\n\n\n\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n\n\n  var len_i = Math.floor(i.length / 2);\n\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n\nfunction test(){\n\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 20; i++) {\n    test1 = []\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1,20); j++) {\n      var num = getRandomInt(0,100)\n      test1.push(num);\n      test2.push(num);\n    }\n    test1.sort((a,b) => a-b);\n\n    console.log(mergesort(test2));\n    console.log(test1);\n    console.log(\"\");\n\n  }\n\n}\n//test()\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n*/\n"]},"metadata":{},"sourceType":"module"}