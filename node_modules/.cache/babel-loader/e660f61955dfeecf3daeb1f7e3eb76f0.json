{"ast":null,"code":"function mergesort() {}\n\nfunction merge(left, right) {\n  var len_l = left.length;\n  var len_r = right.length;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  result = [];\n\n  while (i <= len_l & j <= len_r) {\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n\n    k += 1;\n  }\n\n  while (i <= len_l) {\n    result.push(left[i]);\n    i += 1;\n  }\n\n  while (j <= len_r) {\n    result.push(right[j]);\n    j += 1;\n  }\n\n  return result;\n}\n\nexport default mergesort;","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["mergesort","merge","left","right","len_l","length","len_r","i","j","k","result","push"],"mappings":"AAEA,SAASA,SAAT,GAAqB,CAKpB;;AAID,SAASC,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;AAE1B,MAAIC,KAAK,GAAGF,IAAI,CAACG,MAAjB;AACA,MAAIC,KAAK,GAAGH,KAAK,CAACE,MAAlB;AAEA,MAAIE,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AAEAC,EAAAA,MAAM,GAAG,EAAT;;AAEA,SAAOH,CAAC,IAAIH,KAAL,GAAaI,CAAC,IAAIF,KAAzB,EAA+B;AAC7B,QAAIJ,IAAI,CAACK,CAAD,CAAJ,IAAWJ,KAAK,CAACK,CAAD,CAApB,EAAyB;AACvBE,MAAAA,MAAM,CAACC,IAAP,CAAYT,IAAI,CAACK,CAAD,CAAhB;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD,KAHD,MAGO;AACLG,MAAAA,MAAM,CAACC,IAAP,CAAYR,KAAK,CAACK,CAAD,CAAjB;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD;;AACDC,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOF,CAAC,IAAIH,KAAZ,EAAkB;AAChBM,IAAAA,MAAM,CAACC,IAAP,CAAYT,IAAI,CAACK,CAAD,CAAhB;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOC,CAAC,IAAIF,KAAZ,EAAkB;AAChBI,IAAAA,MAAM,CAACC,IAAP,CAAYR,KAAK,CAACK,CAAD,CAAjB;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOE,MAAP;AACD;;AAGD,eAAeV,SAAf","sourcesContent":["\n\nfunction mergesort() {\n\n\n\n\n}\n\n\n\nfunction merge(left, right) {\n\n  var len_l = left.length;\n  var len_r = right.length;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  result = [];\n\n  while (i <= len_l & j <= len_r){\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j])\n      j += 1\n    }\n    k += 1;\n  }\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\nexport default mergesort;\n"]},"metadata":{},"sourceType":"module"}