{"ast":null,"code":"function mergesort(i) {\n  if (i.length < 2) {\n    return i;\n  }\n\n  console.log(i);\n  var len_i = Math.floor(i.length);\n  console.log(len_i);\n  var left = i.slice(0, len_i);\n  var right = i.slice(len_i);\n  var left = mergesort(left);\n  var right = mergesort(right);\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var result = [];\n\n  while (i <= len_l & j <= len_r) {\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n\n    k += 1;\n  }\n\n  while (i <= len_l) {\n    result.push(left[i]);\n    i += 1;\n  }\n\n  while (j <= len_r) {\n    result.push(right[j]);\n    j += 1;\n  }\n\n  return result;\n}\n\nfunction test() {\n  var test1 = [];\n  var test2 = [];\n\n  for (var i = 0; i < 10; i++) {\n    test1 = [];\n    test2 = [];\n\n    for (var j = 0; j < getRandomInt(1, 7); j++) {\n      var num = getRandomInt(0, 100);\n      test1.push(num);\n      test2.push(num);\n    }\n\n    test1.sort((a, b) => a - b);\n    console.log(mergesort(test2)); //console.log(test1);\n    //console.log(\"\");\n  }\n}\n\ntest();\nexport default mergesort; //console.log(mergesort([1,2,5,2,3,33333,2,11,23,52,10]));\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["mergesort","i","length","console","log","len_i","Math","floor","left","slice","right","merge","len_l","len_r","j","k","result","push","test","test1","test2","getRandomInt","num","sort","a","b","min","max","random"],"mappings":"AAEA,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AAEpB,MAAIA,CAAC,CAACC,MAAF,GAAW,CAAf,EAAiB;AACf,WAAOD,CAAP;AACD;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AAEA,MAAII,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWN,CAAC,CAACC,MAAb,CAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,MAAIG,IAAI,GAAGP,CAAC,CAACQ,KAAF,CAAQ,CAAR,EAAUJ,KAAV,CAAX;AACA,MAAIK,KAAK,GAAGT,CAAC,CAACQ,KAAF,CAAQJ,KAAR,CAAZ;AAGA,MAAIG,IAAI,GAAGR,SAAS,CAACQ,IAAD,CAApB;AACA,MAAIE,KAAK,GAAGV,SAAS,CAACU,KAAD,CAArB;AAEA,SAAOC,KAAK,CAACH,IAAD,EAAOE,KAAP,CAAZ;AACD;;AAID,SAASC,KAAT,CAAeH,IAAf,EAAqBE,KAArB,EAA4B;AAE1B,MAAIE,KAAK,GAAGJ,IAAI,CAACN,MAAL,GAAc,CAA1B;AACA,MAAIW,KAAK,GAAGH,KAAK,CAACR,MAAN,GAAe,CAA3B;AAEA,MAAID,CAAC,GAAG,CAAR;AACA,MAAIa,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AAEA,MAAIC,MAAM,GAAG,EAAb;;AAEA,SAAOf,CAAC,IAAKW,KAAN,GAAeE,CAAC,IAAKD,KAA5B,EAAmC;AAEjC,QAAIL,IAAI,CAACP,CAAD,CAAJ,IAAWS,KAAK,CAACI,CAAD,CAApB,EAAyB;AACvBE,MAAAA,MAAM,CAACC,IAAP,CAAYT,IAAI,CAACP,CAAD,CAAhB;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD,KAHD,MAGO;AACLe,MAAAA,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACI,CAAD,CAAjB;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD;;AACDC,IAAAA,CAAC,IAAI,CAAL;AACD;;AAED,SAAOd,CAAC,IAAIW,KAAZ,EAAkB;AAChBI,IAAAA,MAAM,CAACC,IAAP,CAAYT,IAAI,CAACP,CAAD,CAAhB;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOa,CAAC,IAAID,KAAZ,EAAkB;AAChBG,IAAAA,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACI,CAAD,CAAjB;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOE,MAAP;AACD;;AAED,SAASE,IAAT,GAAe;AAEb,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BkB,IAAAA,KAAK,GAAG,EAAR;AACAC,IAAAA,KAAK,GAAG,EAAR;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,YAAY,CAAC,CAAD,EAAG,CAAH,CAAhC,EAAuCP,CAAC,EAAxC,EAA4C;AAC1C,UAAIQ,GAAG,GAAGD,YAAY,CAAC,CAAD,EAAG,GAAH,CAAtB;AACAF,MAAAA,KAAK,CAACF,IAAN,CAAWK,GAAX;AACAF,MAAAA,KAAK,CAACH,IAAN,CAAWK,GAAX;AACD;;AACDH,IAAAA,KAAK,CAACI,IAAN,CAAW,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,GAACC,CAAtB;AAEAtB,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAS,CAACoB,KAAD,CAArB,EAV2B,CAW3B;AACA;AAED;AAEF;;AACDF,IAAI;AAEJ,eAAelB,SAAf,C,CAEA;;AACA,SAASqB,YAAT,CAAsBK,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,SAAOrB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACsB,MAAL,MAAiBD,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAP;AACD","sourcesContent":["\n\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n  console.log(i);\n\n  var len_i = Math.floor(i.length);\n  console.log(len_i);\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\n\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\nfunction test(){\n\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 10; i++) {\n    test1 = []\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1,7); j++) {\n      var num = getRandomInt(0,100)\n      test1.push(num);\n      test2.push(num);\n    }\n    test1.sort((a,b) => a-b);\n\n    console.log(mergesort(test2));\n    //console.log(test1);\n    //console.log(\"\");\n\n  }\n\n}\ntest()\n\nexport default mergesort;\n\n//console.log(mergesort([1,2,5,2,3,33333,2,11,23,52,10]));\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n"]},"metadata":{},"sourceType":"module"}