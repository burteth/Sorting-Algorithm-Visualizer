{"ast":null,"code":"var _jsxFileName = \"/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/App.js\";\nimport React from \"react\"; //import uuid from \"uuid\";\n\nimport Bars from \"./Bars\";\nimport selectionsort from \"./SelectionSort\"; //import SortButton from \"./SortButton\"\n\nconst num_bars = 100;\nconst min_bar = 20;\nconst max_bar = 500;\nconst color1 = '#007bff';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.randomizebars = () => {\n      this.setState({\n        bar_list: GenerateBars(num_bars, min_bar, max_bar)\n      });\n    };\n\n    this.updatebars = updated_bars => {\n      var bar_docs = document.getElementsByClassName(\"bar\");\n      var counter = 0;\n      var k = 0;\n      var animations = updated_bars[1];\n      var first;\n      var second;\n      var started = false;\n      var temp;\n      var temporary_color = [0, 0];\n\n      while (counter < animations.length) {\n        setTimeout(() => {\n          if (started) {\n            bar_docs[animations[k - 1][0]].style.backgroundColor = temporary_color[0];\n            bar_docs[animations[k - 1][1]].style.backgroundColor = temporary_color[1];\n          }\n\n          first = animations[k][0];\n          second = animations[k][1];\n\n          if (animations[k][2] === 0) {\n            temporary_color[0] = bar_docs[first].style.backgroundColor;\n            temporary_color[1] = bar_docs[second].style.backgroundColor;\n            bar_docs[first].style.backgroundColor = 'red';\n            bar_docs[second].style.backgroundColor = 'red';\n          } else {\n            temp = bar_docs[first].style.height;\n            bar_docs[first].style.height = bar_docs[second].style.height;\n            bar_docs[second].style.height = temp;\n            temporary_color[0] = bar_docs[second].style.backgroundColor;\n            temporary_color[1] = bar_docs[first].style.backgroundColor;\n            bar_docs[first].style.backgroundColor = 'red';\n            bar_docs[second].style.backgroundColor = 'red';\n          }\n\n          k++;\n          started = true;\n        }, counter * 10);\n        counter++;\n      }\n\n      ;\n    };\n\n    this.state = {\n      bar_list: []\n    };\n  }\n\n  componentDidMount() {\n    this.randomizebars();\n  }\n\n  render() {\n    const {\n      bar_list\n    } = this.state;\n    return React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, React.createElement(\"div\", {\n      id: \"UI_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, React.createElement(\"div\", {\n      id: \"button_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => this.randomizebars(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, \"Randomize\"), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: () => this.updatebars(selectionsort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, \"Selection Sort\"), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\")), React.createElement(Bars, {\n      bar_list: bar_list,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nfunction GenerateBars(len, min, max) {\n  var lst = [];\n\n  for (var i = 0; i < len; i++) {\n    var random = getRandomInt(min, max);\n    lst.push({\n      id: i,\n      len: random,\n      color: colorpernum(min, max, random)\n    }); //lst.push({id: uuid.v4(),len: random,color: colorpernum(min,max,random)});\n\n    colorpernum(min, max, random);\n  }\n\n  return lst;\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n/*\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n*/\n\n\nfunction colorpernum(min, max, number) {\n  var place = Math.floor(255 * (number - min) / (max - min)); //var color = \"rgb(\"+place +\",0,0)\";\n  //var color = \"rgb(0,\"+place+\",0)\";\n\n  var color = \"rgb(\" + 0 + \",\" + Math.floor(place * 123 / 255) + \",\" + place + \")\"; //console.log(place,color);\n\n  return color;\n}","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/App.js"],"names":["React","Bars","selectionsort","num_bars","min_bar","max_bar","color1","App","Component","constructor","props","randomizebars","setState","bar_list","GenerateBars","updatebars","updated_bars","bar_docs","document","getElementsByClassName","counter","k","animations","first","second","started","temp","temporary_color","length","setTimeout","style","backgroundColor","height","state","componentDidMount","render","JSON","parse","stringify","len","min","max","lst","i","random","getRandomInt","push","id","color","colorpernum","Math","floor","number","place"],"mappings":"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","sourcesContent":["import React from \"react\";\n//import uuid from \"uuid\";\nimport Bars from \"./Bars\";\n\nimport selectionsort from \"./SelectionSort\"\n//import SortButton from \"./SortButton\"\n\n\nconst num_bars = 100;\nconst min_bar = 20;\nconst max_bar = 500;\nconst color1 = '#007bff';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      bar_list: []\n    };\n}\n\ncomponentDidMount() {\n  this.randomizebars();\n}\n\n  randomizebars = () => {\n    this.setState({bar_list: GenerateBars(num_bars,min_bar,max_bar)});\n  }\n\n  updatebars = (updated_bars) => {\n\n    var bar_docs = document.getElementsByClassName(\"bar\");\n    var counter = 0;\n    var k = 0;\n    var animations = updated_bars[1]\n\n    var first;\n    var second;\n\n    var started = false;\n\n    var temp;\n    var temporary_color = [0,0]\n    while(counter < animations.length){\n\n      setTimeout(() => {\n        if (started){\n          bar_docs[animations[k-1][0]].style.backgroundColor = temporary_color[0];\n          bar_docs[animations[k-1][1]].style.backgroundColor = temporary_color[1];\n        }\n        first = animations[k][0];\n        second = animations[k][1];\n\n\n        if (animations[k][2] === 0){\n          temporary_color[0] = bar_docs[first].style.backgroundColor;\n          temporary_color[1] = bar_docs[second].style.backgroundColor;\n          bar_docs[first].style.backgroundColor = 'red';\n          bar_docs[second].style.backgroundColor = 'red';\n        }else{\n          temp = bar_docs[first].style.height;\n          bar_docs[first].style.height = bar_docs[second].style.height;\n          bar_docs[second].style.height = temp;\n          temporary_color[0] = bar_docs[second].style.backgroundColor;\n          temporary_color[1] = bar_docs[first].style.backgroundColor;\n          bar_docs[first].style.backgroundColor = 'red';\n          bar_docs[second].style.backgroundColor = 'red';\n\n\n        }\n\n        k++;\n        started = true;\n\n      },counter*10);\n      counter++;\n    };\n\n  }\n\n  render() {\n    const { bar_list } = this.state;\n\n    return (\n      <div>\n        <div id=\"UI_container\">\n          <div id=\"button_container\">\n            <button className=\"btn btn-primary\" onClick={() => this.randomizebars()}>Randomize</button>\n            <button className=\"btn btn-primary\" onClick={() => this.updatebars(selectionsort(JSON.parse(JSON.stringify(this.state.bar_list))))}>Selection Sort</button>\n            <button className=\"btn btn-primary\">Merge Sort</button>\n            <button className=\"btn btn-primary\">Quick Sort</button>\n            <button className=\"btn btn-primary\">Heap Sort</button>\n            <button className=\"btn btn-primary\">Bubble Sort</button>\n          </div>\n            <Bars bar_list={bar_list} />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction GenerateBars(len, min, max) {\n  var lst = [];\n  for (var i = 0; i < len; i++) {\n    var random = getRandomInt(min, max);\n    lst.push({id: i, len: random,color: colorpernum(min,max,random)});\n    //lst.push({id: uuid.v4(),len: random,color: colorpernum(min,max,random)});\n    colorpernum(min,max,random);\n  }\n\n  return lst;\n}\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n/*\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n*/\nfunction colorpernum(min,max,number){\n  var place = Math.floor(255*(number - min) / (max - min));\n  //var color = \"rgb(\"+place +\",0,0)\";\n  //var color = \"rgb(0,\"+place+\",0)\";\n  var color = \"rgb(\"+0+\",\"+Math.floor(place*123/255)+\",\"+place+\")\";\n  //console.log(place,color);\n  return color;\n}\n"]},"metadata":{},"sourceType":"module"}