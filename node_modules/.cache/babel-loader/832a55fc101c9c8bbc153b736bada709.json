{"ast":null,"code":"import React, { isValidElement, cloneElement, createContext, useRef, useEffect, useMemo } from 'react';\nimport warning from 'warning';\n/* eslint-disable no-restricted-globals, eqeqeq,  */\n\n/**\r\n * React currently throws a warning when using useLayoutEffect on the server.\r\n * To get around it, we can conditionally useEffect on the server (no-op) and\r\n * useLayoutEffect in the browser. We occasionally need useLayoutEffect to\r\n * ensure we don't get a render flash for certain operations, but we may also\r\n * need affected components to render on the server. One example is when setting\r\n * a component's descendants to retrieve their index values.\r\n *\r\n * Important to note that using this hook as an escape hatch will break the\r\n * eslint dependency warnings unless you rename the import to `useLayoutEffect`.\r\n * Use sparingly only when the effect won't effect the rendered HTML to avoid\r\n * any server/client mismatch.\r\n *\r\n * If a useLayoutEffect is needed and the result would create a mismatch, it's\r\n * likely that the component in question shouldn't be rendered on the server at\r\n * all, so a better approach would be to lazily render those in a parent\r\n * component after client-side hydration.\r\n *\r\n * TODO: We are calling useLayoutEffect in a couple of places that will likely\r\n * cause some issues for SSR users, whether the warning shows or not. Audit and\r\n * fix these.\r\n *\r\n * https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\r\n * https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.js\r\n *\r\n * @param effect\r\n * @param deps\r\n */\n\nvar useIsomorphicLayoutEffect = /*#__PURE__*/canUseDOM() ? React.useLayoutEffect : React.useEffect;\nvar checkedPkgs = {};\n/**\r\n * When in dev mode, checks that styles for a given @reach package are loaded.\r\n *\r\n * @param packageName Name of the package to check.\r\n * @example checkStyles(\"dialog\") will check for styles for @reach/dialog\r\n */\n// @ts-ignore\n\nvar checkStyles = function checkStyles(packageName) {\n  return void packageName;\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  // In CJS files, process.env.NODE_ENV is stripped from our build, but we need\n  // it to prevent style checks from clogging up user logs while testing.\n  // This is a workaround until we can tweak the build a bit to accommodate.\n  var _ref = typeof process !== \"undefined\" ? process : {\n    env: {\n      NODE_ENV: \"development\"\n    }\n  },\n      env = _ref.env;\n\n  checkStyles = function checkStyles(packageName) {\n    // only check once per package\n    if (checkedPkgs[packageName]) return;\n    checkedPkgs[packageName] = true;\n\n    if (env.NODE_ENV !== \"test\" && parseInt(window.getComputedStyle(document.body).getPropertyValue(\"--reach-\" + packageName), 10) !== 1) {\n      console.warn(\"@reach/\" + packageName + \" styles not found. If you are using a bundler like webpack or parcel include this in the entry file of your app before any of your own styles:\\n\\n    import \\\"@reach/\" + packageName + \"/styles.css\\\";\\n\\n  Otherwise you'll need to include them some other way:\\n\\n    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"node_modules/@reach/\" + packageName + \"/styles.css\\\" />\\n\\n  For more information visit https://ui.reach.tech/styling.\\n  \");\n    }\n  };\n}\n/**\r\n * Ponyfill for the global object in some environments.\r\n *\r\n * @link https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\r\n */\n\n\nvar ponyfillGlobal = typeof window != \"undefined\" && window.Math == Math ? window : typeof self != \"undefined\" && self.Math == Math ? self :\n/*#__PURE__*/\n// eslint-disable-next-line no-new-func\nFunction(\"return this\")();\n/**\r\n * Passes or assigns an arbitrary value to a ref function or object.\r\n *\r\n * @param ref\r\n * @param value\r\n */\n\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (isFunction(ref)) {\n    ref(value);\n  } else {\n    try {\n      ref.current = value;\n    } catch (error) {\n      throw new Error(\"Cannot assign value \\\"\" + value + \"\\\" to ref \\\"\" + ref + \"\\\"\");\n    }\n  }\n}\n/**\r\n * Checks true|\"true\" vs false|\"false\"\r\n *\r\n * @param value\r\n */\n\n\nfunction boolOrBoolString(value) {\n  return value === \"true\" ? true : isBoolean(value) ? value : false;\n}\n\nfunction canUseDOM() {\n  return typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\n}\n/**\r\n * Type-safe clone element\r\n *\r\n * @param element\r\n * @param props\r\n * @param children\r\n */\n\n\nfunction cloneValidElement(element, props) {\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  return isValidElement(element) ? cloneElement.apply(void 0, [element, props].concat(children)) : element;\n}\n\nfunction createNamedContext(name, defaultValue) {\n  var Ctx = createContext(defaultValue);\n  Ctx.displayName = name;\n  return Ctx;\n}\n/**\r\n * This is a hack for sure. The thing is, getting a component to intelligently\r\n * infer props based on a component or JSX string passed into an `as` prop is\r\n * kind of a huge pain. Getting it to work and satisfy the constraints of\r\n * `forwardRef` seems dang near impossible. To avoid needing to do this awkward\r\n * type song-and-dance every time we want to forward a ref into a component\r\n * that accepts an `as` prop, we abstract all of that mess to this function for\r\n * the time time being.\r\n *\r\n * TODO: Eventually we should probably just try to get the type defs above\r\n * working across the board, but ain't nobody got time for that mess!\r\n *\r\n * @param Comp\r\n */\n\n\nfunction forwardRefWithAs(comp) {\n  return React.forwardRef(comp);\n}\n/**\r\n * Get a computed style value by property, backwards compatible with IE\r\n * @param element\r\n * @param styleProp\r\n */\n\n\nfunction getElementComputedStyle(element, styleProp) {\n  var y = null;\n  var doc = getOwnerDocument(element);\n\n  if (element.currentStyle) {\n    y = element.currentStyle[styleProp];\n  } else if (doc && doc.defaultView && isFunction(doc.defaultView.getComputedStyle)) {\n    y = doc.defaultView.getComputedStyle(element, null).getPropertyValue(styleProp);\n  }\n\n  return y;\n}\n/**\r\n * Get an element's owner document. Useful when components are used in iframes\r\n * or other environments like dev tools.\r\n *\r\n * @param element\r\n */\n\n\nfunction getOwnerDocument(element) {\n  return element && element.ownerDocument ? element.ownerDocument : canUseDOM() ? document : null;\n}\n/**\r\n * Get the scrollbar offset distance.\r\n */\n\n\nfunction getScrollbarOffset() {\n  try {\n    if (window.innerWidth > document.documentElement.clientWidth) {\n      return window.innerWidth - document.documentElement.clientWidth;\n    }\n  } catch (err) {}\n\n  return 0;\n}\n/**\r\n * Checks whether or not a value is a boolean.\r\n *\r\n * @param value\r\n */\n\n\nfunction isBoolean(value) {\n  return typeof value === \"boolean\";\n}\n/**\r\n * Checks whether or not a value is a function.\r\n *\r\n * @param value\r\n */\n\n\nfunction isFunction(value) {\n  return !!(value && {}.toString.call(value) == \"[object Function]\");\n}\n/**\r\n * Checks whether or not a value is a number.\r\n *\r\n * @param value\r\n */\n\n\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\n/**\r\n * Detects right clicks\r\n *\r\n * @param nativeEvent\r\n */\n\n\nfunction isRightClick(nativeEvent) {\n  return nativeEvent.which === 3 || nativeEvent.button === 2;\n}\n/**\r\n * Checks whether or not a value is a string.\r\n *\r\n * @param value\r\n */\n\n\nfunction isString(value) {\n  return typeof value === \"string\";\n}\n/**\r\n * Joins strings to format IDs for compound components.\r\n *\r\n * @param args\r\n */\n\n\nfunction makeId() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return args.filter(function (val) {\n    return val != null;\n  }).join(\"--\");\n}\n/**\r\n * No-op function.\r\n */\n\n\nfunction noop() {}\n/**\r\n * Convert our state strings for HTML data attributes.\r\n * No need for a fancy kebab-caser here, we know what our state strings are!\r\n *\r\n * @param state\r\n */\n\n\nfunction stateToAttributeString(state) {\n  return String(state).replace(/([\\s_]+)/g, \"-\").toLowerCase();\n}\n/**\r\n * Logs a warning in dev mode when a component switches from controlled to\r\n * uncontrolled, or vice versa\r\n *\r\n * A single prop should typically be used to determine whether or not a\r\n * component is controlled or not.\r\n *\r\n * @param controlPropValue\r\n * @param controlPropName\r\n * @param componentName\r\n */\n\n\nfunction useControlledSwitchWarning(controlPropValue, controlPropName, componentName) {\n  /*\r\n   * Determine whether or not the component is controlled and warn the developer\r\n   * if this changes unexpectedly.\r\n   */\n  var isControlled = controlPropValue != null;\n\n  var _useRef = useRef(isControlled),\n      wasControlled = _useRef.current;\n\n  var effect = noop;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    effect = function effect() {\n      process.env.NODE_ENV !== \"production\" ? warning(!(!isControlled && wasControlled), \"`\" + componentName + \"` is changing from uncontrolled to be controlled. Reach UI components should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled `\" + componentName + \"` for the lifetime of the component. Check the `\" + controlPropName + \"` prop.\") : void 0;\n      process.env.NODE_ENV !== \"production\" ? warning(!(!isControlled && wasControlled), \"`\" + componentName + \"` is changing from controlled to be uncontrolled. Reach UI components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled `\" + componentName + \"` for the lifetime of the component. Check the `\" + controlPropName + \"` prop.\") : void 0;\n    };\n  }\n\n  useEffect(effect, [componentName, controlPropName, isControlled]);\n}\n/**\r\n * React hook for creating a value exactly once.\r\n * @see https://github.com/Andarist/use-constant\r\n */\n\n\nfunction useConstant(fn) {\n  var ref = React.useRef();\n\n  if (!ref.current) {\n    ref.current = {\n      v: fn()\n    };\n  }\n\n  return ref.current.v;\n}\n/**\r\n * Detect when focus changes in our document.\r\n *\r\n * @param handleChange\r\n * @param when\r\n * @param ownerDocument\r\n */\n\n\nfunction useFocusChange(handleChange, when, ownerDocument) {\n  if (handleChange === void 0) {\n    handleChange = console.log;\n  }\n\n  if (when === void 0) {\n    when = \"focus\";\n  }\n\n  if (ownerDocument === void 0) {\n    ownerDocument = document;\n  }\n\n  var lastActiveElement = useRef(ownerDocument.activeElement);\n  useEffect(function () {\n    lastActiveElement.current = ownerDocument.activeElement;\n\n    function onChange(event) {\n      if (lastActiveElement.current !== ownerDocument.activeElement) {\n        handleChange(ownerDocument.activeElement, lastActiveElement.current, event);\n        lastActiveElement.current = ownerDocument.activeElement;\n      }\n    }\n\n    ownerDocument.addEventListener(when, onChange, true);\n    return function () {\n      ownerDocument.removeEventListener(when, onChange);\n    };\n  }, [when, handleChange, ownerDocument]);\n}\n/**\r\n * Passes or assigns a value to multiple refs (typically a DOM node). Useful for\r\n * dealing with components that need an explicit ref for DOM calculations but\r\n * also forwards refs assigned by an app.\r\n *\r\n * @param refs Refs to fork\r\n */\n\n\nfunction useForkedRef() {\n  for (var _len3 = arguments.length, refs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    refs[_key3] = arguments[_key3];\n  }\n\n  return useMemo(function () {\n    if (refs.every(function (ref) {\n      return ref == null;\n    })) {\n      return null;\n    }\n\n    return function (node) {\n      refs.forEach(function (ref) {\n        assignRef(ref, node);\n      });\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n/**\r\n * Returns the previous value of a reference after a component update.\r\n *\r\n * @param value\r\n */\n\n\nfunction usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n/**\r\n * Call an effect after a component update, skipping the initial mount.\r\n *\r\n * @param effect Effect to call\r\n * @param deps Effect dependency list\r\n */\n\n\nfunction useUpdateEffect(effect, deps) {\n  var mounted = useRef(false);\n  useEffect(function () {\n    if (mounted.current) {\n      effect();\n    } else {\n      mounted.current = true;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, deps);\n}\n/**\r\n * Just a lil state logger\r\n *\r\n * @param state\r\n * @param DEBUG\r\n */\n\n\nfunction useStateLogger(state, DEBUG) {\n  if (DEBUG === void 0) {\n    DEBUG = false;\n  }\n\n  var effect = noop;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (DEBUG) {\n      effect = function effect() {\n        console.group(\"State Updated\");\n        console.log(\"%c\" + state, \"font-weight: normal; font-size: 120%; font-style: italic;\");\n        console.groupEnd();\n      };\n    }\n  }\n\n  useEffect(effect, [state]);\n}\n/**\r\n * Wraps a lib-defined event handler and a user-defined event handler, returning\r\n * a single handler that allows a user to prevent lib-defined handlers from\r\n * firing.\r\n *\r\n * @param theirHandler User-supplied event handler\r\n * @param ourHandler Library-supplied event handler\r\n */\n\n\nfunction wrapEvent(theirHandler, ourHandler) {\n  return function (event) {\n    theirHandler && theirHandler(event);\n\n    if (!event.defaultPrevented) {\n      return ourHandler(event);\n    }\n  };\n}\n\nexport { assignRef, boolOrBoolString, canUseDOM, checkStyles, cloneValidElement, createNamedContext, forwardRefWithAs, getElementComputedStyle, getOwnerDocument, getScrollbarOffset, isBoolean, isFunction, isNumber, isRightClick, isString, makeId, noop, ponyfillGlobal, stateToAttributeString, useConstant, useControlledSwitchWarning, useFocusChange, useForkedRef, useIsomorphicLayoutEffect, usePrevious, useStateLogger, useUpdateEffect, wrapEvent };","map":{"version":3,"sources":["../src/index.tsx"],"names":["useIsomorphicLayoutEffect","canUseDOM","React","useEffect","checkedPkgs","checkStyles","env","NODE_ENV","parseInt","window","document","console","ponyfillGlobal","self","Function","assignRef","ref","value","isFunction","boolOrBoolString","isBoolean","cloneValidElement","element","props","children","isValidElement","cloneElement","createNamedContext","name","defaultValue","Ctx","createContext","forwardRefWithAs","comp","getElementComputedStyle","styleProp","y","doc","getOwnerDocument","getScrollbarOffset","isNumber","isRightClick","nativeEvent","isString","makeId","args","val","noop","stateToAttributeString","state","String","useControlledSwitchWarning","controlPropValue","controlPropName","componentName","isControlled","current","wasControlled","useRef","effect","useConstant","fn","v","useFocusChange","handleChange","log","when","ownerDocument","lastActiveElement","useForkedRef","refs","useMemo","usePrevious","useUpdateEffect","deps","mounted","useStateLogger","DEBUG","wrapEvent","theirHandler","ourHandler","event"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-globals, eqeqeq,  */\n\nimport React, {\n  cloneElement,\n  createContext,\n  isValidElement,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport warning from \"warning\";\nimport {\n  As,\n  AssignableRef,\n  ComponentWithAs,\n  ComponentWithForwardedRef,\n  DistributiveOmit,\n  PropsFromAs,\n  PropsWithAs,\n  SingleOrArray,\n  ThenArg,\n} from \"./types\";\n\n/**\n * React currently throws a warning when using useLayoutEffect on the server.\n * To get around it, we can conditionally useEffect on the server (no-op) and\n * useLayoutEffect in the browser. We occasionally need useLayoutEffect to\n * ensure we don't get a render flash for certain operations, but we may also\n * need affected components to render on the server. One example is when setting\n * a component's descendants to retrieve their index values.\n *\n * Important to note that using this hook as an escape hatch will break the\n * eslint dependency warnings unless you rename the import to `useLayoutEffect`.\n * Use sparingly only when the effect won't effect the rendered HTML to avoid\n * any server/client mismatch.\n *\n * If a useLayoutEffect is needed and the result would create a mismatch, it's\n * likely that the component in question shouldn't be rendered on the server at\n * all, so a better approach would be to lazily render those in a parent\n * component after client-side hydration.\n *\n * TODO: We are calling useLayoutEffect in a couple of places that will likely\n * cause some issues for SSR users, whether the warning shows or not. Audit and\n * fix these.\n *\n * https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n * https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.js\n *\n * @param effect\n * @param deps\n */\nexport const useIsomorphicLayoutEffect = canUseDOM()\n  ? React.useLayoutEffect\n  : React.useEffect;\n\nlet checkedPkgs: { [key: string]: boolean } = {};\n\n/**\n * When in dev mode, checks that styles for a given @reach package are loaded.\n *\n * @param packageName Name of the package to check.\n * @example checkStyles(\"dialog\") will check for styles for @reach/dialog\n */\n// @ts-ignore\nlet checkStyles = (packageName: string): void => void packageName;\n\nif (__DEV__) {\n  // In CJS files, process.env.NODE_ENV is stripped from our build, but we need\n  // it to prevent style checks from clogging up user logs while testing.\n  // This is a workaround until we can tweak the build a bit to accommodate.\n  let { env } =\n    typeof process !== \"undefined\"\n      ? process\n      : { env: { NODE_ENV: \"development\" } };\n\n  checkStyles = (packageName: string) => {\n    // only check once per package\n    if (checkedPkgs[packageName]) return;\n    checkedPkgs[packageName] = true;\n\n    if (\n      env.NODE_ENV !== \"test\" &&\n      parseInt(\n        window\n          .getComputedStyle(document.body)\n          .getPropertyValue(`--reach-${packageName}`),\n        10\n      ) !== 1\n    ) {\n      console.warn(\n        `@reach/${packageName} styles not found. If you are using a bundler like webpack or parcel include this in the entry file of your app before any of your own styles:\n\n    import \"@reach/${packageName}/styles.css\";\n\n  Otherwise you'll need to include them some other way:\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"node_modules/@reach/${packageName}/styles.css\" />\n\n  For more information visit https://ui.reach.tech/styling.\n  `\n      );\n    }\n  };\n}\n\nexport { checkStyles };\n\n/**\n * Ponyfill for the global object in some environments.\n *\n * @link https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n */\nexport const ponyfillGlobal =\n  typeof window != \"undefined\" && window.Math == Math\n    ? window\n    : typeof self != \"undefined\" && self.Math == Math\n    ? self\n    : // eslint-disable-next-line no-new-func\n      Function(\"return this\")();\n\n/**\n * Passes or assigns an arbitrary value to a ref function or object.\n *\n * @param ref\n * @param value\n */\nexport function assignRef<RefValueType = any>(\n  ref: AssignableRef<RefValueType> | null | undefined,\n  value: any\n) {\n  if (ref == null) return;\n  if (isFunction(ref)) {\n    ref(value);\n  } else {\n    try {\n      ref.current = value;\n    } catch (error) {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`);\n    }\n  }\n}\n\n/**\n * Checks true|\"true\" vs false|\"false\"\n *\n * @param value\n */\nexport function boolOrBoolString(value: any): value is \"true\" | true {\n  return value === \"true\" ? true : isBoolean(value) ? value : false;\n}\n\nexport function canUseDOM() {\n  return (\n    typeof window !== \"undefined\" &&\n    typeof window.document !== \"undefined\" &&\n    typeof window.document.createElement !== \"undefined\"\n  );\n}\n\n/**\n * Type-safe clone element\n *\n * @param element\n * @param props\n * @param children\n */\nexport function cloneValidElement<Props>(\n  element: React.ReactElement<Props> | React.ReactNode,\n  props?: Partial<Props> & React.Attributes,\n  ...children: React.ReactNode[]\n): React.ReactElement<Props> | React.ReactNode {\n  return isValidElement(element)\n    ? cloneElement(element, props, ...children)\n    : element;\n}\n\nexport function createNamedContext<ContextValueType>(\n  name: string,\n  defaultValue: ContextValueType\n): React.Context<ContextValueType> {\n  const Ctx = createContext<ContextValueType>(defaultValue);\n  Ctx.displayName = name;\n  return Ctx;\n}\n\n/**\n * This is a hack for sure. The thing is, getting a component to intelligently\n * infer props based on a component or JSX string passed into an `as` prop is\n * kind of a huge pain. Getting it to work and satisfy the constraints of\n * `forwardRef` seems dang near impossible. To avoid needing to do this awkward\n * type song-and-dance every time we want to forward a ref into a component\n * that accepts an `as` prop, we abstract all of that mess to this function for\n * the time time being.\n *\n * TODO: Eventually we should probably just try to get the type defs above\n * working across the board, but ain't nobody got time for that mess!\n *\n * @param Comp\n */\nexport function forwardRefWithAs<Props, ComponentType extends As>(\n  comp: (\n    props: PropsFromAs<ComponentType, Props>,\n    ref: React.RefObject<any>\n  ) => React.ReactElement | null\n) {\n  return (React.forwardRef(comp as any) as unknown) as ComponentWithAs<\n    ComponentType,\n    Props\n  >;\n}\n\n/**\n * Get a computed style value by property, backwards compatible with IE\n * @param element\n * @param styleProp\n */\nexport function getElementComputedStyle(\n  element: HTMLElement & {\n    currentStyle?: Record<string, string>;\n  },\n  styleProp: string\n) {\n  let y: string | null = null;\n  let doc = getOwnerDocument(element);\n  if (element.currentStyle) {\n    y = element.currentStyle[styleProp];\n  } else if (\n    doc &&\n    doc.defaultView &&\n    isFunction(doc.defaultView.getComputedStyle)\n  ) {\n    y = doc.defaultView\n      .getComputedStyle(element, null)\n      .getPropertyValue(styleProp);\n  }\n  return y;\n}\n\n/**\n * Get an element's owner document. Useful when components are used in iframes\n * or other environments like dev tools.\n *\n * @param element\n */\nexport function getOwnerDocument<T extends HTMLElement = HTMLElement>(\n  element: T | null\n) {\n  return element && element.ownerDocument\n    ? element.ownerDocument\n    : canUseDOM()\n    ? document\n    : null;\n}\n\n/**\n * Get the scrollbar offset distance.\n */\nexport function getScrollbarOffset() {\n  try {\n    if (window.innerWidth > document.documentElement.clientWidth) {\n      return window.innerWidth - document.documentElement.clientWidth;\n    }\n  } catch (err) {}\n  return 0;\n}\n\n/**\n * Checks whether or not a value is a boolean.\n *\n * @param value\n */\nexport function isBoolean(value: any): value is boolean {\n  return typeof value === \"boolean\";\n}\n\n/**\n * Checks whether or not a value is a function.\n *\n * @param value\n */\nexport function isFunction(value: any): value is Function {\n  return !!(value && {}.toString.call(value) == \"[object Function]\");\n}\n\n/**\n * Checks whether or not a value is a number.\n *\n * @param value\n */\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\";\n}\n\n/**\n * Detects right clicks\n *\n * @param nativeEvent\n */\nexport function isRightClick(nativeEvent: MouseEvent) {\n  return nativeEvent.which === 3 || nativeEvent.button === 2;\n}\n\n/**\n * Checks whether or not a value is a string.\n *\n * @param value\n */\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\n/**\n * Joins strings to format IDs for compound components.\n *\n * @param args\n */\nexport function makeId(...args: (string | number | null | undefined)[]) {\n  return args.filter(val => val != null).join(\"--\");\n}\n\n/**\n * No-op function.\n */\nexport function noop(): void {}\n\n/**\n * Convert our state strings for HTML data attributes.\n * No need for a fancy kebab-caser here, we know what our state strings are!\n *\n * @param state\n */\nexport function stateToAttributeString(state: any) {\n  return String(state)\n    .replace(/([\\s_]+)/g, \"-\")\n    .toLowerCase();\n}\n\n/**\n * Logs a warning in dev mode when a component switches from controlled to\n * uncontrolled, or vice versa\n *\n * A single prop should typically be used to determine whether or not a\n * component is controlled or not.\n *\n * @param controlPropValue\n * @param controlPropName\n * @param componentName\n */\nexport function useControlledSwitchWarning(\n  controlPropValue: any,\n  controlPropName: string,\n  componentName: string\n) {\n  /*\n   * Determine whether or not the component is controlled and warn the developer\n   * if this changes unexpectedly.\n   */\n  let isControlled = controlPropValue != null;\n  let { current: wasControlled } = useRef(isControlled);\n  let effect = noop;\n  if (__DEV__) {\n    effect = function() {\n      warning(\n        !(!isControlled && wasControlled),\n        `\\`${componentName}\\` is changing from uncontrolled to be controlled. Reach UI components should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled \\`${componentName}\\` for the lifetime of the component. Check the \\`${controlPropName}\\` prop.`\n      );\n      warning(\n        !(!isControlled && wasControlled),\n        `\\`${componentName}\\` is changing from controlled to be uncontrolled. Reach UI components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled \\`${componentName}\\` for the lifetime of the component. Check the \\`${controlPropName}\\` prop.`\n      );\n    };\n  }\n  useEffect(effect, [componentName, controlPropName, isControlled]);\n}\n\n/**\n * React hook for creating a value exactly once.\n * @see https://github.com/Andarist/use-constant\n */\nexport function useConstant<ValueType>(fn: () => ValueType): ValueType {\n  const ref = React.useRef<{ v: ValueType }>();\n  if (!ref.current) {\n    ref.current = { v: fn() };\n  }\n  return ref.current.v;\n}\n\n/**\n * Detect when focus changes in our document.\n *\n * @param handleChange\n * @param when\n * @param ownerDocument\n */\nexport function useFocusChange(\n  handleChange: (\n    activeElement: Element | null,\n    previousActiveElement: Element | null,\n    event?: FocusEvent\n  ) => void = console.log,\n  when: \"focus\" | \"blur\" = \"focus\",\n  ownerDocument: Document = document\n) {\n  let lastActiveElement = useRef(ownerDocument.activeElement);\n\n  useEffect(() => {\n    lastActiveElement.current = ownerDocument.activeElement;\n\n    function onChange(event: FocusEvent) {\n      if (lastActiveElement.current !== ownerDocument.activeElement) {\n        handleChange(\n          ownerDocument.activeElement,\n          lastActiveElement.current,\n          event\n        );\n        lastActiveElement.current = ownerDocument.activeElement;\n      }\n    }\n\n    ownerDocument.addEventListener(when, onChange, true);\n\n    return () => {\n      ownerDocument.removeEventListener(when, onChange);\n    };\n  }, [when, handleChange, ownerDocument]);\n}\n\n/**\n * Passes or assigns a value to multiple refs (typically a DOM node). Useful for\n * dealing with components that need an explicit ref for DOM calculations but\n * also forwards refs assigned by an app.\n *\n * @param refs Refs to fork\n */\nexport function useForkedRef<RefValueType = any>(\n  ...refs: (AssignableRef<RefValueType> | null | undefined)[]\n) {\n  return useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return (node: any) => {\n      refs.forEach(ref => {\n        assignRef(ref, node);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n\n/**\n * Returns the previous value of a reference after a component update.\n *\n * @param value\n */\nexport function usePrevious<ValueType = any>(value: ValueType) {\n  const ref = useRef<ValueType | null>(null);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\n/**\n * Call an effect after a component update, skipping the initial mount.\n *\n * @param effect Effect to call\n * @param deps Effect dependency list\n */\nexport function useUpdateEffect(\n  effect: React.EffectCallback,\n  deps?: React.DependencyList\n) {\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) {\n      effect();\n    } else {\n      mounted.current = true;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\n/**\n * Just a lil state logger\n *\n * @param state\n * @param DEBUG\n */\nexport function useStateLogger(state: string, DEBUG: boolean = false) {\n  let effect = noop;\n  if (__DEV__) {\n    if (DEBUG) {\n      effect = function() {\n        console.group(\"State Updated\");\n        console.log(\n          \"%c\" + state,\n          \"font-weight: normal; font-size: 120%; font-style: italic;\"\n        );\n        console.groupEnd();\n      };\n    }\n  }\n  useEffect(effect, [state]);\n}\n\n/**\n * Wraps a lib-defined event handler and a user-defined event handler, returning\n * a single handler that allows a user to prevent lib-defined handlers from\n * firing.\n *\n * @param theirHandler User-supplied event handler\n * @param ourHandler Library-supplied event handler\n */\nexport function wrapEvent<EventType extends React.SyntheticEvent | Event>(\n  theirHandler: ((event: EventType) => any) | undefined,\n  ourHandler: (event: EventType) => any\n): (event: EventType) => any {\n  return event => {\n    theirHandler && theirHandler(event);\n    if (!event.defaultPrevented) {\n      return ourHandler(event);\n    }\n  };\n}\n\n// Export types\nexport {\n  As,\n  AssignableRef,\n  ComponentWithAs,\n  ComponentWithForwardedRef,\n  DistributiveOmit,\n  PropsFromAs,\n  PropsWithAs,\n  SingleOrArray,\n  ThenArg,\n};\n"]},"metadata":{},"sourceType":"module"}