{"ast":null,"code":"function mergesort() {}\n\nfunction merge(left, right) {\n  var len_l = left.length;\n  var len_r = right.length;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var result = [];\n\n  while (i <= len_l - 1 & j <= len_r - 1) {\n    console.log(result);\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n\n    k += 1;\n  }\n\n  while (i < len_l - 1) {\n    result.push(left[i]);\n    i += 1;\n  }\n\n  while (j < len_r - 1) {\n    result.push(right[j]);\n    j += 1;\n  }\n\n  return result;\n}\n\nconsole.log(merge([1, 2, 44, 555], [0, 10, 100, 10000]));\nexport default mergesort;","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["mergesort","merge","left","right","len_l","length","len_r","i","j","k","result","console","log","push"],"mappings":"AAEA,SAASA,SAAT,GAAqB,CAKpB;;AAID,SAASC,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;AAE1B,MAAIC,KAAK,GAAGF,IAAI,CAACG,MAAjB;AACA,MAAIC,KAAK,GAAGH,KAAK,CAACE,MAAlB;AAEA,MAAIE,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AAEA,MAAIC,MAAM,GAAG,EAAb;;AAEA,SAAOH,CAAC,IAAKH,KAAK,GAAC,CAAZ,GAAiBI,CAAC,IAAKF,KAAK,GAAC,CAApC,EAAuC;AACrCK,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,QAAIR,IAAI,CAACK,CAAD,CAAJ,IAAWJ,KAAK,CAACK,CAAD,CAApB,EAAyB;AACvBE,MAAAA,MAAM,CAACG,IAAP,CAAYX,IAAI,CAACK,CAAD,CAAhB;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD,KAHD,MAGO;AACLG,MAAAA,MAAM,CAACG,IAAP,CAAYV,KAAK,CAACK,CAAD,CAAjB;AACAA,MAAAA,CAAC,IAAI,CAAL;AACD;;AACDC,IAAAA,CAAC,IAAI,CAAL;AACD;;AAED,SAAOF,CAAC,GAAGH,KAAK,GAAG,CAAnB,EAAqB;AACnBM,IAAAA,MAAM,CAACG,IAAP,CAAYX,IAAI,CAACK,CAAD,CAAhB;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOC,CAAC,GAAGF,KAAK,GAAG,CAAnB,EAAqB;AACnBI,IAAAA,MAAM,CAACG,IAAP,CAAYV,KAAK,CAACK,CAAD,CAAjB;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOE,MAAP;AACD;;AAEDC,OAAO,CAACC,GAAR,CAAYX,KAAK,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,EAAL,EAAQ,GAAR,CAAD,EAAc,CAAC,CAAD,EAAG,EAAH,EAAM,GAAN,EAAU,KAAV,CAAd,CAAjB;AAEA,eAAeD,SAAf","sourcesContent":["\n\nfunction mergesort() {\n\n\n\n\n}\n\n\n\nfunction merge(left, right) {\n\n  var len_l = left.length;\n  var len_r = right.length;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l-1) & j <= (len_r-1)){\n    console.log(result);\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i < len_l - 1){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j < len_r - 1){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\nconsole.log(merge([1,2,44,555],[0,10,100,10000]));\n\nexport default mergesort;\n"]},"metadata":{},"sourceType":"module"}