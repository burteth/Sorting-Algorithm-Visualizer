{"ast":null,"code":"function run_mergesort(bar_list) {\n  //Calls the mergesort function and returns a list of animations\n  var animations = [];\n  /* Animations Array Items:\n   *    1. first index to compare\n   *    2. second index to compare\n   *    3. Operation i.e. swap, compare\n   */\n\n  var arr = [];\n\n  for (var i = 0; i < bar_list.length; i++) {\n    //creates an array of just the lengths of the bars\n    arr.push(bar_list[i][\"len\"]);\n  }\n\n  var sorted = mergesort(arr, 0, arr.length, animations);\n  return animations;\n}\n\nexport default run_mergesort;\n\nfunction mergesort(i, start, end, animations) {\n  if (end - start === 1) {\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n  i = mergesort(i, start, start + length_of_list, animations);\n  i = mergesort(i, start + length_of_list, end, animations);\n  i = merge(i, start, start + length_of_list, end, animations);\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i, animations) {\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var result = [];\n  var shift_count = 0;\n\n  while (i < len_l & j < len_r) {\n    if (main[i + start_i] <= main[j + mid_i]) {\n      result.push(main[i + start_i]);\n      animations.push([i + start_i, j + mid_i, \"compare\"]);\n      i += 1;\n    } else {\n      result.push(main[j + mid_i]);\n      animations.push([i + start_i + shift_count, j + mid_i, \"mergesort swap\"]);\n      shift_count += 1;\n      j += 1;\n    }\n\n    k += 1;\n  }\n\n  while (i < len_l) {\n    result.push(main[i + start_i]);\n    i += 1;\n  }\n\n  while (j < len_r) {\n    result.push(main[j + mid_i]);\n    j += 1;\n  }\n\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n  return main;\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["run_mergesort","bar_list","animations","arr","i","length","push","sorted","mergesort","start","end","length_of_list","Math","floor","merge","main","start_i","mid_i","end_i","len_l","len_r","j","k","result","shift_count","Array","prototype","splice","apply","concat","getRandomInt","min","max","random"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,QAAvB,EAAiC;AAC/B;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA;;;;;;AAKA,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC;AACAD,IAAAA,GAAG,CAACG,IAAJ,CAASL,QAAQ,CAACG,CAAD,CAAR,CAAY,KAAZ,CAAT;AACD;;AAED,MAAIG,MAAM,GAAGC,SAAS,CAACL,GAAD,EAAM,CAAN,EAASA,GAAG,CAACE,MAAb,EAAqBH,UAArB,CAAtB;AAEA,SAAOA,UAAP;AACD;;AACD,eAAeF,aAAf;;AAEA,SAASQ,SAAT,CAAmBJ,CAAnB,EAAsBK,KAAtB,EAA6BC,GAA7B,EAAkCR,UAAlC,EAA8C;AAC5C,MAAIQ,GAAG,GAAGD,KAAN,KAAgB,CAApB,EAAuB;AACrB,WAAOL,CAAP;AACD;;AAED,MAAIO,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACH,GAAG,GAAGD,KAAP,IAAgB,CAA3B,CAArB;AAEAL,EAAAA,CAAC,GAAGI,SAAS,CAACJ,CAAD,EAAIK,KAAJ,EAAWA,KAAK,GAAGE,cAAnB,EAAmCT,UAAnC,CAAb;AACAE,EAAAA,CAAC,GAAGI,SAAS,CAACJ,CAAD,EAAIK,KAAK,GAAGE,cAAZ,EAA4BD,GAA5B,EAAiCR,UAAjC,CAAb;AAEAE,EAAAA,CAAC,GAAGU,KAAK,CAACV,CAAD,EAAIK,KAAJ,EAAWA,KAAK,GAAGE,cAAnB,EAAmCD,GAAnC,EAAwCR,UAAxC,CAAT;AAEA,SAAOE,CAAP;AACD;;AAED,SAASU,KAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8BC,KAA9B,EAAqCC,KAArC,EAA4ChB,UAA5C,EAAwD;AACtD,MAAIiB,KAAK,GAAGF,KAAK,GAAGD,OAApB;AACA,MAAII,KAAK,GAAGF,KAAK,GAAGD,KAApB;AAEA,MAAIb,CAAC,GAAG,CAAR;AACA,MAAIiB,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AAEA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,WAAW,GAAG,CAAlB;;AAEA,SAAQpB,CAAC,GAAGe,KAAL,GAAeE,CAAC,GAAGD,KAA1B,EAAkC;AAEhC,QAAIL,IAAI,CAACX,CAAC,GAAGY,OAAL,CAAJ,IAAqBD,IAAI,CAACM,CAAC,GAAGJ,KAAL,CAA7B,EAA0C;AAExCM,MAAAA,MAAM,CAACjB,IAAP,CAAYS,IAAI,CAACX,CAAC,GAAGY,OAAL,CAAhB;AACAd,MAAAA,UAAU,CAACI,IAAX,CAAgB,CAACF,CAAC,GAAGY,OAAL,EAAcK,CAAC,GAAGJ,KAAlB,EAAyB,SAAzB,CAAhB;AACAb,MAAAA,CAAC,IAAI,CAAL;AAED,KAND,MAMO;AAELmB,MAAAA,MAAM,CAACjB,IAAP,CAAYS,IAAI,CAACM,CAAC,GAAGJ,KAAL,CAAhB;AACAf,MAAAA,UAAU,CAACI,IAAX,CAAgB,CAACF,CAAC,GAAGY,OAAJ,GAAcQ,WAAf,EAA4BH,CAAC,GAAGJ,KAAhC,EAAuC,gBAAvC,CAAhB;AACAO,MAAAA,WAAW,IAAI,CAAf;AACAH,MAAAA,CAAC,IAAI,CAAL;AAED;;AACDC,IAAAA,CAAC,IAAI,CAAL;AACD;;AAED,SAAOlB,CAAC,GAAGe,KAAX,EAAkB;AAChBI,IAAAA,MAAM,CAACjB,IAAP,CAAYS,IAAI,CAACX,CAAC,GAAGY,OAAL,CAAhB;AACAZ,IAAAA,CAAC,IAAI,CAAL;AACD;;AACD,SAAOiB,CAAC,GAAGD,KAAX,EAAkB;AAChBG,IAAAA,MAAM,CAACjB,IAAP,CAAYS,IAAI,CAACM,CAAC,GAAGJ,KAAL,CAAhB;AACAI,IAAAA,CAAC,IAAI,CAAL;AACD;;AAGDI,EAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6Bb,IAA7B,EAAmC,CAACC,OAAD,EAAUO,MAAM,CAAClB,MAAjB,EAAyBwB,MAAzB,CAAgCN,MAAhC,CAAnC;AAEA,SAAOR,IAAP;AACD;;AAED,SAASe,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,SAAOpB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqB,MAAL,MAAiBD,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAP;AACD","sourcesContent":["function run_mergesort(bar_list) {\n  //Calls the mergesort function and returns a list of animations\n  var animations = [];\n  /* Animations Array Items:\n   *    1. first index to compare\n   *    2. second index to compare\n   *    3. Operation i.e. swap, compare\n   */\n  var arr = [];\n  for (var i = 0; i < bar_list.length; i++) {\n    //creates an array of just the lengths of the bars\n    arr.push(bar_list[i][\"len\"]);\n  }\n\n  var sorted = mergesort(arr, 0, arr.length, animations);\n\n  return animations;\n}\nexport default run_mergesort;\n\nfunction mergesort(i, start, end, animations) {\n  if (end - start === 1) {\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n\n  i = mergesort(i, start, start + length_of_list, animations);\n  i = mergesort(i, start + length_of_list, end, animations);\n\n  i = merge(i, start, start + length_of_list, end, animations);\n\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i, animations) {\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n  var shift_count = 0;\n\n  while ((i < len_l) & (j < len_r)) {\n\n    if (main[i + start_i] <= main[j + mid_i]) {\n\n      result.push(main[i + start_i]);\n      animations.push([i + start_i, j + mid_i, \"compare\"]);\n      i += 1;\n\n    } else {\n\n      result.push(main[j + mid_i]);\n      animations.push([i + start_i + shift_count, j + mid_i, \"mergesort swap\"]);\n      shift_count += 1;\n      j += 1;\n\n    }\n    k += 1;\n  }\n\n  while (i < len_l) {\n    result.push(main[i + start_i]);\n    i += 1;\n  }\n  while (j < len_r) {\n    result.push(main[j + mid_i]);\n    j += 1;\n  }\n\n\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n\n  return main;\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n"]},"metadata":{},"sourceType":"module"}