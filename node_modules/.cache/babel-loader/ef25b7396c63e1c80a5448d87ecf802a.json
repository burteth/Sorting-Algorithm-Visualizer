{"ast":null,"code":"function run_mergesort(bar_list) {\n  var animations = [];\n  var arr = [];\n\n  for (var i = 0; i < bar_list.length; i++) {\n    arr.push(bar_list[i]['len']);\n  }\n\n  console.log(arr); //var sorted = mergesort(bar_list,)\n}\n\nexport default run_mergesort;\n/*\nfunction mergesort(i, start, end, animations) {\n\n  if (end - start === 1){\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n\n  console.log(i);\n  //console.log(\"Length: \",length_of_list);\n  console.log(\"Start: \",start, \" End: \", end);\n  console.log(\"Sliced:\", i.slice(start,end));\n  console.log(\" \");\n\n\n  i = mergesort(JSON.parse(JSON.stringify(i)), start, start + length_of_list, animations);\n  i = mergesort(JSON.parse(JSON.stringify(i)), start + length_of_list, end, animations);\n\n  i = merge(JSON.parse(JSON.stringify(i)), start, start + length_of_list, end, animations);\n\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i, animations) {\n\n\n  console.log(\"Real:\",main);\n  console.log(\"Left:\",main.slice(start_i,mid_i));\n  console.log(\"Right:\",main.slice(mid_i,end_i));\n\n\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i < (len_l) & j < (len_r)){\n    console.log(main[i + start_i], 'compared to', main[j + mid_i]);\n    //animations.push([i + start_i, j + mid_i, 0])\n\n    if (main[i + start_i] <= main[j + mid_i]) {\n      result.push(main[i + start_i]);\n      animations.push([i + start_i, j + mid_i, 1])\n      i += 1;\n    } else {\n      result.push(main[j + mid_i]);\n      animations.push([i + start_i, j + mid_i, 1])\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i < len_l){\n    result.push(main[i+start_i]);\n    i += 1;\n  }\n  while (j < len_r){\n    result.push(main[j + mid_i]);\n    j += 1;\n  }\n\n  console.log(\"Main Before:\",main);\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n\n  console.log(\"Result:\",result);\n  console.log(\"Main:\",main);\n  console.log(\"Animations:\", animations);\n  console.log(\" \");\n\n  return main;\n}\n\n\nfunction test(){\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 20; i++) {\n    test1 = []\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1,20); j++) {\n      var num = getRandomInt(0,100)\n      test1.push(num);\n      test2.push(num);\n    }\n\n    //console.log(\"MergeSorted:\",mergesort(test2,0,test2.length));\n    //console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))===JSON.stringify(test1.sort((a,b) => a-b)));\n\n }\n\n}\n\nfunction partial_test(){\n  var test1 = [21,5,24,29,44,3,7];\n  var test2 = [21,5,24,29,44,3,7];\n  //console.log(mergesort(test2,0,7));\n  //console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))===JSON.stringify(test1.sort((a,b) => a-b)));\n\n  //console.log(merge([-100,22,50,70,40,88,199,2000],0,4,8));\n\n}\n\n//test();\n//partial_test();\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n*/","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["run_mergesort","bar_list","animations","arr","i","length","push","console","log"],"mappings":"AAEA,SAASA,aAAT,CAAuBC,QAAvB,EAAgC;AAC5B,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCD,IAAAA,GAAG,CAACG,IAAJ,CAASL,QAAQ,CAACG,CAAD,CAAR,CAAY,KAAZ,CAAT;AACD;;AACDG,EAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ,EAN4B,CAO5B;AACH;;AACD,eAAeH,aAAf;AACA","sourcesContent":["\n\nfunction run_mergesort(bar_list){\n    var animations = [];\n    var arr = []\n    for (var i = 0; i < bar_list.length; i++) {\n      arr.push(bar_list[i]['len'])\n    }\n    console.log(arr);\n    //var sorted = mergesort(bar_list,)\n}\nexport default run_mergesort;\n/*\nfunction mergesort(i, start, end, animations) {\n\n  if (end - start === 1){\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n\n  console.log(i);\n  //console.log(\"Length: \",length_of_list);\n  console.log(\"Start: \",start, \" End: \", end);\n  console.log(\"Sliced:\", i.slice(start,end));\n  console.log(\" \");\n\n\n  i = mergesort(JSON.parse(JSON.stringify(i)), start, start + length_of_list, animations);\n  i = mergesort(JSON.parse(JSON.stringify(i)), start + length_of_list, end, animations);\n\n  i = merge(JSON.parse(JSON.stringify(i)), start, start + length_of_list, end, animations);\n\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i, animations) {\n\n\n  console.log(\"Real:\",main);\n  console.log(\"Left:\",main.slice(start_i,mid_i));\n  console.log(\"Right:\",main.slice(mid_i,end_i));\n\n\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i < (len_l) & j < (len_r)){\n    console.log(main[i + start_i], 'compared to', main[j + mid_i]);\n    //animations.push([i + start_i, j + mid_i, 0])\n\n    if (main[i + start_i] <= main[j + mid_i]) {\n      result.push(main[i + start_i]);\n      animations.push([i + start_i, j + mid_i, 1])\n      i += 1;\n    } else {\n      result.push(main[j + mid_i]);\n      animations.push([i + start_i, j + mid_i, 1])\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i < len_l){\n    result.push(main[i+start_i]);\n    i += 1;\n  }\n  while (j < len_r){\n    result.push(main[j + mid_i]);\n    j += 1;\n  }\n\n  console.log(\"Main Before:\",main);\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n\n  console.log(\"Result:\",result);\n  console.log(\"Main:\",main);\n  console.log(\"Animations:\", animations);\n  console.log(\" \");\n\n  return main;\n}\n\n\nfunction test(){\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 20; i++) {\n    test1 = []\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1,20); j++) {\n      var num = getRandomInt(0,100)\n      test1.push(num);\n      test2.push(num);\n    }\n\n    //console.log(\"MergeSorted:\",mergesort(test2,0,test2.length));\n    //console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))===JSON.stringify(test1.sort((a,b) => a-b)));\n\n }\n\n}\n\nfunction partial_test(){\n  var test1 = [21,5,24,29,44,3,7];\n  var test2 = [21,5,24,29,44,3,7];\n  //console.log(mergesort(test2,0,7));\n  //console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))===JSON.stringify(test1.sort((a,b) => a-b)));\n\n  //console.log(merge([-100,22,50,70,40,88,199,2000],0,4,8));\n\n}\n\n//test();\n//partial_test();\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}