{"ast":null,"code":"function mergesort(i, start, end, animations) {\n  if (end - start === 1) {\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n  /*\n  console.log(i);\n  console.log(\"Length: \",length_of_list);\n  console.log(\"Start: \",start, \" End: \", end);\n  console.log(\"Sliced:\", i.slice(start,end));\n  console.log(\" \");\n  */\n\n  i = mergesort(JSON.parse(JSON.stringify(i)), start, start + length_of_list);\n  i = mergesort(JSON.parse(JSON.stringify(i)), start + length_of_list, end);\n  i = merge(JSON.parse(JSON.stringify(i)), start, start + length_of_list, end);\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i) {\n  /*\n  console.log(\"Real:\",main);\n  console.log(\"Left:\",left);\n  console.log(\"Right:\",right);\n  */\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var result = [];\n\n  while (i < len_l & j < len_r) {\n    //console.log(left[i], 'compared to', right[j]);\n    if (main[i + start_i] <= main[j + mid_i]) {\n      result.push(main[i + start_i]);\n      i += 1;\n    } else {\n      result.push(main[j + mid_i]);\n      j += 1;\n    }\n\n    k += 1; //console.log(len_l,i,len_r,j);\n  }\n\n  while (i < len_l) {\n    result.push(main[i + start_i]);\n    i += 1;\n  }\n\n  while (j < len_r) {\n    result.push(main[j + mid_i]);\n    j += 1;\n  } //console.log(\"Main Before:\",main);\n\n\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n  /*\n  console.log(\"Result:\",result);\n  console.log(\"Main:\",main);\n  console.log(\" \");\n  */\n\n  return main;\n}\n\nexport default mergesort;\n\nfunction test() {\n  var test1 = [];\n  var test2 = [];\n\n  for (var i = 0; i < 20; i++) {\n    test1 = [];\n    test2 = [];\n\n    for (var j = 0; j < getRandomInt(1, 20); j++) {\n      var num = getRandomInt(0, 100);\n      test1.push(num);\n      test2.push(num);\n    } //console.log(\"MergeSorted:\",mergesort(test2,0,test2.length));\n    //console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))==JSON.stringify(test1.sort((a,b) => a-b)));\n\n  }\n}\n\nfunction partial_test() {\n  var test1 = [21, 5, 24, 29, 44, 3, 7];\n  var test2 = [21, 5, 24, 29, 44, 3, 7]; //console.log(mergesort(test2,0,7));\n\n  console.log(JSON.stringify(mergesort(test2, 0, test2.length, [])) == JSON.stringify(test1.sort((a, b) => a - b))); //console.log(merge([-100,22,50,70,40,88,199,2000],0,4,8));\n} //test();\n\n\npartial_test();\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n/*\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n\n\n  var len_i = Math.floor(i.length / 2);\n\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n*/","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["mergesort","i","start","end","animations","length_of_list","Math","floor","JSON","parse","stringify","merge","main","start_i","mid_i","end_i","len_l","len_r","j","k","result","push","Array","prototype","splice","apply","length","concat","test","test1","test2","getRandomInt","num","partial_test","console","log","sort","a","b","min","max","random"],"mappings":"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","sourcesContent":["\n\nfunction mergesort(i, start, end, animations) {\n\n  if (end - start === 1){\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n  /*\n  console.log(i);\n  console.log(\"Length: \",length_of_list);\n  console.log(\"Start: \",start, \" End: \", end);\n  console.log(\"Sliced:\", i.slice(start,end));\n  console.log(\" \");\n*/\n\n  i = mergesort(JSON.parse(JSON.stringify(i)), start, start + length_of_list);\n  i = mergesort(JSON.parse(JSON.stringify(i)), start + length_of_list, end);\n\n  i = merge(JSON.parse(JSON.stringify(i)), start, start + length_of_list, end);\n\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i) {\n\n  /*\n  console.log(\"Real:\",main);\n  console.log(\"Left:\",left);\n  console.log(\"Right:\",right);\n  */\n\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i < (len_l) & j < (len_r)){\n    //console.log(left[i], 'compared to', right[j]);\n\n    if (main[i + start_i] <= main[j + mid_i]) {\n      result.push(main[i + start_i]);\n      i += 1;\n    } else {\n      result.push(main[j + mid_i]);\n      j += 1;\n    }\n    k += 1;\n    //console.log(len_l,i,len_r,j);\n  }\n\n  while (i < len_l){\n    result.push(main[i+start_i]);\n    i += 1;\n  }\n  while (j < len_r){\n    result.push(main[j + mid_i]);\n    j += 1;\n  }\n\n  //console.log(\"Main Before:\",main);\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n  /*\n  console.log(\"Result:\",result);\n  console.log(\"Main:\",main);\n  console.log(\" \");\n  */\n  return main;\n}\n\nexport default mergesort;\n\n\nfunction test(){\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 20; i++) {\n    test1 = []\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1,20); j++) {\n      var num = getRandomInt(0,100)\n      test1.push(num);\n      test2.push(num);\n    }\n\n    //console.log(\"MergeSorted:\",mergesort(test2,0,test2.length));\n    //console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))==JSON.stringify(test1.sort((a,b) => a-b)));\n\n }\n\n}\n\nfunction partial_test(){\n  var test1 = [21,5,24,29,44,3,7];\n  var test2 = [21,5,24,29,44,3,7];\n  //console.log(mergesort(test2,0,7));\n  console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))==JSON.stringify(test1.sort((a,b) => a-b)));\n\n\n\n  //console.log(merge([-100,22,50,70,40,88,199,2000],0,4,8));\n\n}\n\n//test();\npartial_test();\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n\n\n  var len_i = Math.floor(i.length / 2);\n\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n*/\n"]},"metadata":{},"sourceType":"module"}