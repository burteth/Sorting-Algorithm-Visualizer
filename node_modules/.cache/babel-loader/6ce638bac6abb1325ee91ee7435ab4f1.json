{"ast":null,"code":"function run_mergesort(bar_list){//Calls the mergesort function and returns a list of animations\nvar animations=[];/* Animations Array Items:\n   *    1. first index to compare\n   *    2. second index to compare\n   *    3. Operation i.e. swap, compare\n   */var arr=[];for(var i=0;i<bar_list.length;i++){//creates an array of just the lengths of the bars\narr.push(bar_list[i][\"len\"]);}mergesort(arr,0,arr.length,animations);return animations;}export default run_mergesort;function mergesort(i,start,end,animations){if(end-start===1){return i;}var length_of_list=Math.floor((end-start)/2);i=mergesort(i,start,start+length_of_list,animations);i=mergesort(i,start+length_of_list,end,animations);i=merge(i,start,start+length_of_list,end,animations);return i;}function merge(main,start_i,mid_i,end_i,animations){var len_l=mid_i-start_i;var len_r=end_i-mid_i;var i=0;var j=0;var result=[];var shift_count=0;while(i<len_l&j<len_r){if(main[i+start_i]<=main[j+mid_i]){result.push(main[i+start_i]);animations.push([i+start_i,j+mid_i,\"compare\"]);i+=1;}else{result.push(main[j+mid_i]);animations.push([i+start_i+shift_count,j+mid_i,\"mergesort swap\"]);shift_count+=1;j+=1;}}while(i<len_l){result.push(main[i+start_i]);i+=1;}while(j<len_r){result.push(main[j+mid_i]);j+=1;}Array.prototype.splice.apply(main,[start_i,result.length].concat(result));return main;}","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["run_mergesort","bar_list","animations","arr","i","length","push","mergesort","start","end","length_of_list","Math","floor","merge","main","start_i","mid_i","end_i","len_l","len_r","j","result","shift_count","Array","prototype","splice","apply","concat"],"mappings":"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","sourcesContent":["function run_mergesort(bar_list) {\n  //Calls the mergesort function and returns a list of animations\n  var animations = [];\n  /* Animations Array Items:\n   *    1. first index to compare\n   *    2. second index to compare\n   *    3. Operation i.e. swap, compare\n   */\n  var arr = [];\n  for (var i = 0; i < bar_list.length; i++) {\n    //creates an array of just the lengths of the bars\n    arr.push(bar_list[i][\"len\"]);\n  }\n\n  mergesort(arr, 0, arr.length, animations);\n\n  return animations;\n}\nexport default run_mergesort;\n\nfunction mergesort(i, start, end, animations) {\n  if (end - start === 1) {\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n\n  i = mergesort(i, start, start + length_of_list, animations);\n  i = mergesort(i, start + length_of_list, end, animations);\n\n  i = merge(i, start, start + length_of_list, end, animations);\n\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i, animations) {\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n\n  var i = 0;\n  var j = 0;\n\n  var result = [];\n  var shift_count = 0;\n\n  while ((i < len_l) & (j < len_r)) {\n\n    if (main[i + start_i] <= main[j + mid_i]) {\n\n      result.push(main[i + start_i]);\n      animations.push([i + start_i, j + mid_i, \"compare\"]);\n      i += 1;\n\n    } else {\n\n      result.push(main[j + mid_i]);\n      animations.push([i + start_i + shift_count, j + mid_i, \"mergesort swap\"]);\n      shift_count += 1;\n      j += 1;\n\n    }\n  }\n\n  while (i < len_l) {\n    result.push(main[i + start_i]);\n    i += 1;\n  }\n  while (j < len_r) {\n    result.push(main[j + mid_i]);\n    j += 1;\n  }\n\n\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n\n  return main;\n}\n"]},"metadata":{},"sourceType":"module"}