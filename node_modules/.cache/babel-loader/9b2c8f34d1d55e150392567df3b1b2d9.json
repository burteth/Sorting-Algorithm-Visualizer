{"ast":null,"code":"var _jsxFileName = \"/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/App.js\";\nimport React from \"react\";\nimport Bars from \"./Bars\";\nimport run_heapsort from \"./HeapSort\";\nimport run_quicksort from \"./QuickSort\";\nimport run_mergesort from \"./MergeSort\";\nimport selectionsort from \"./SelectionSort\";\nimport bubblesort from \"./BubbleSort\";\nvar num_bars = 200;\nconst min_bar = 10;\nconst max_bar = 500;\nconst color1 = '#005af6'; //(0, 123, 255)\n\nconst speed_max = 100;\nconst highlight_color = \"red\";\nconst gradient = true;\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearCounters = () => {\n      document.getElementById('compairsons').innerText = 0;\n      document.getElementById('swaps').innerText = 0;\n      document.getElementById('total_ops').innerText = 0;\n    };\n\n    this.randomizebars = () => {\n      this.stopCurrentSort();\n      this.setState({\n        bar_list: GenerateBars(num_bars, min_bar, max_bar)\n      });\n      this.clearCounters();\n    };\n\n    this.updateBarsFromState = () => {\n      var bar_docs = document.getElementsByClassName(\"bar\");\n      var current_bars = [];\n\n      for (var j = 0; j < bar_docs.length; j++) {\n        current_bars.push({\n          color: bar_docs[j].style.backgroundColor,\n          id: j,\n          len: parseInt(bar_docs[j].style.height)\n        });\n      }\n\n      this.setState({\n        bar_list: current_bars\n      });\n    };\n\n    this.stopCurrentSort = () => {\n      //Clear all timeouts\n      for (var i = 0; i < this.timeouts.length; i++) {\n        clearTimeout(this.timeouts[i]);\n      } //Remove the bars that are currently red\n\n\n      var bar_docs = document.getElementsByClassName(\"bar\");\n\n      for (var i = 0; i < bar_docs.length; i++) {\n        if (bar_docs[i].style.backgroundColor === highlight_color) {\n          bar_docs[i].style.backgroundColor = colorpernum(min_bar, max_bar, parseInt(bar_docs[i].style.height));\n        }\n      } //Update the current state with the bars that are visable\n\n\n      this.updateBarsFromState();\n    };\n\n    this.makeGradient = () => {\n      var grad = document.getElementById(\"gradient_button\");\n      var bar_docs = document.getElementsByClassName(\"bar\");\n      var bars = set_bar_list(bar_docs); //Make one color\n\n      if (grad.className.includes(\"active\")) {\n        grad.classList.remove(\"active\");\n\n        for (var i = 0; i < bars.length; i++) {\n          bars[i][\"color\"] = color1;\n        }\n\n        this.setState({\n          bar_list: bars\n        }); //make gradient\n      } else {\n        grad.classList.add(\"active\");\n\n        for (var i = 0; i < bars.length; i++) {\n          bars[i][\"color\"] = colorpernum(min_bar, max_bar, bars[i][\"len\"]);\n        }\n      }\n    };\n\n    this.updatebars = animations => {\n      //console.log(animations);\n      this.clearCounters();\n      this.timeouts = [];\n      var bar_docs = document.getElementsByClassName(\"bar\");\n      var counter = 0;\n      var k = 0;\n      var temp;\n      var temporary_color = [0, 0];\n      var num_compairsons = 0;\n      var num_swaps = 0; //linear\n\n      var speed = Math.abs(-1 * document.getElementById(\"speedrange\").value * speed_max / 100.0 + speed_max); //testing\n\n      var test_init = [];\n      var test_1 = set_bar_list(bar_docs);\n\n      for (var i = 0; i < test_1.length; i++) {\n        test_init.push(test_1[i][\"color\"]);\n      } //console.log(test_init);\n\n\n      while (counter < animations.length) {\n        this.timeouts.push(setTimeout(() => {\n          var first_index = animations[k][0];\n          var second_index = animations[k][1]; //console.log(\"Bar Docs:\", bar_docs);\n          //console.log(first_index);\n          //If the while loop has begun then change the color of the last two bars back into what they were\n\n          if (k > 0) {\n            bar_docs[animations[k - 1][0]].style.backgroundColor = temporary_color[0];\n            bar_docs[animations[k - 1][1]].style.backgroundColor = temporary_color[1];\n          }\n\n          if (animations[k][2] === \"compare\") {\n            //Compare the bars without swapping\n            temporary_color[0] = bar_docs[first_index].style.backgroundColor;\n            temporary_color[1] = bar_docs[second_index].style.backgroundColor;\n            bar_docs[first_index].style.backgroundColor = highlight_color;\n            bar_docs[second_index].style.backgroundColor = highlight_color;\n            num_compairsons += 1;\n            document.getElementById('compairsons').innerText = num_compairsons;\n          } else if (animations[k][2] === \"swap\") {\n            //Swap the bars out\n            temp = bar_docs[first_index].style.height;\n            bar_docs[first_index].style.height = bar_docs[second_index].style.height;\n            bar_docs[second_index].style.height = temp;\n            temporary_color[0] = bar_docs[second_index].style.backgroundColor;\n            temporary_color[1] = bar_docs[first_index].style.backgroundColor;\n            bar_docs[first_index].style.backgroundColor = highlight_color;\n            bar_docs[second_index].style.backgroundColor = highlight_color;\n            num_swaps += 1;\n            document.getElementById('swaps').innerText = num_swaps;\n          } else if (animations[k][2] === \"mergesort swap\") {\n            //Only used my mergesort because the swapping is different\n            //store height and color of bars that are being changed\n            temporary_color[0] = bar_docs[second_index].style.backgroundColor;\n            temporary_color[1] = bar_docs[second_index - 1].style.backgroundColor;\n            temp = bar_docs[second_index].style.height; //shift up the bars one place to the right\n\n            for (var i = second_index; i > first_index; i--) {\n              bar_docs[i].style.height = bar_docs[i - 1].style.height;\n              bar_docs[i].style.backgroundColor = bar_docs[i - 1].style.backgroundColor;\n            } //update the height of the first index with the height of the second index bar\n\n\n            bar_docs[first_index].style.height = temp; //highlight the bars being compared\n\n            bar_docs[first_index].style.backgroundColor = highlight_color;\n            bar_docs[second_index].style.backgroundColor = highlight_color;\n            num_swaps += 1;\n            document.getElementById('swaps').innerText = num_swaps;\n          }\n\n          if (k === animations.length - 1) {\n            //This occurs if it is the final animation\n            bar_docs[first_index].style.backgroundColor = temporary_color[0];\n            bar_docs[second_index].style.backgroundColor = temporary_color[1]; //update the bars in the current state\n\n            this.setState({\n              bar_list: set_bar_list(bar_docs)\n            });\n          }\n\n          document.getElementById('total_ops').innerText = num_swaps + num_compairsons;\n          k++;\n        }, counter * speed));\n        counter++;\n      }\n\n      ;\n    };\n\n    this.state = {\n      bar_list: GenerateBars(num_bars, min_bar, max_bar)\n    };\n  }\n\n  componentDidMount() {\n    this.stopCurrentSort = this.stopCurrentSort.bind(this);\n    this.updatebars = this.updatebars.bind(this);\n    this.updateBarsFromState = this.updateBarsFromState.bind(this);\n    this.clearCounters = this.clearCounters.bind(this);\n    this.timeouts = [];\n  }\n\n  render() {\n    const {\n      bar_list\n    } = this.state;\n    return React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, React.createElement(\"div\", {\n      id: \"UI_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, React.createElement(\"div\", {\n      id: \"banner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, \"Sorting Algorithm Visualizer\")), React.createElement(\"div\", {\n      id: \"button_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.randomizebars(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, \"Randomize\"), React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.updatebars(selectionsort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, \"Selection Sort\"), React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.updatebars(run_mergesort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.updatebars(run_quicksort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.updatebars(run_heapsort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.updatebars(bubblesort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\"))), React.createElement(\"div\", {\n      className: \"bars_and_data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, React.createElement(\"div\", {\n      id: \"data_viz_outer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }, React.createElement(\"div\", {\n      id: \"data_viz\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, React.createElement(\"div\", {\n      id: \"counter_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, React.createElement(\"div\", {\n      className: \"data_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 19\n      }\n    }, \"Number of compairsons\", React.createElement(\"div\", {\n      className: \"data_caption\",\n      id: \"compairsons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }, \"0\"))), React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, React.createElement(\"div\", {\n      className: \"data_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 19\n      }\n    }, \"Number of swaps\", React.createElement(\"div\", {\n      className: \"data_caption\",\n      id: \"swaps\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, \"0\"))), React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, React.createElement(\"div\", {\n      className: \"data_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 19\n      }\n    }, \"Total number of operations\", React.createElement(\"div\", {\n      className: \"data_caption\",\n      id: \"total_ops\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, \"0\")))), React.createElement(\"div\", {\n      id: \"range_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    }, React.createElement(\"div\", {\n      className: \"data_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, \"Number of bars\"), React.createElement(\"input\", {\n      type: \"range\",\n      className: \"slider\",\n      id: \"numberange\",\n      min: \"1\",\n      max: \"100\",\n      defaultValue: \"70\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }), React.createElement(\"div\", {\n      className: \"data_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, \"Sorting Speed\"), React.createElement(\"input\", {\n      type: \"range\",\n      className: \"slider\",\n      id: \"speedrange\",\n      min: \"50\",\n      max: \"100\",\n      defaultValue: \"75\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    })), React.createElement(\"div\", {\n      className: \"control_button_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }\n    }, React.createElement(\"button\", {\n      className: \"control_button\",\n      onClick: () => this.randomizebars(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, \"Randomize Array\")), React.createElement(\"div\", {\n      className: \"control_button_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 15\n      }\n    }, React.createElement(\"button\", {\n      className: \"control_button\",\n      id: \"gradient_button\",\n      onClick: () => this.makeGradient(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }, \"Gradient\"), React.createElement(\"button\", {\n      className: \"control_button\",\n      onClick: () => this.stopCurrentSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }, \"Stop\")))), React.createElement(\"div\", {\n      id: \"bar_container_outer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }, React.createElement(Bars, {\n      bar_list: bar_list,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n} //Helper Functions\n\nfunction GenerateBars(len, min, max) {\n  var lst = [];\n\n  for (var i = 0; i < len; i++) {\n    var random = getRandomInt(min, max);\n    lst.push({\n      id: i,\n      len: random,\n      color: colorpernum(min, max, random)\n    });\n    colorpernum(min, max, random);\n  }\n\n  return lst;\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction colorpernum(min, max, number) {\n  var colors = [0, 91, 246];\n  /* Main Color */\n\n  if (gradient) {\n    for (var i = 0; i < colors.length; i++) {\n      colors[i] = Math.floor(colors[i] * (number - min) / (max - min));\n    }\n  }\n\n  var color = \"rgb(\" + colors[0] + \",\" + colors[1] + \",\" + colors[2] + \")\";\n  return color;\n}\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nfunction set_bar_list(div_bars) {\n  var state_bars = [];\n\n  for (var i = 0; i < div_bars.length; i++) {\n    state_bars.push({\n      \"color\": div_bars[i].style.backgroundColor,\n      \"id\": i,\n      \"len\": parseInt(div_bars[i].style.height.slice(0, -2))\n    });\n  }\n\n  return state_bars;\n}","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/App.js"],"names":["React","Bars","run_heapsort","run_quicksort","run_mergesort","selectionsort","bubblesort","num_bars","min_bar","max_bar","color1","speed_max","highlight_color","gradient","App","Component","constructor","props","clearCounters","document","getElementById","innerText","randomizebars","stopCurrentSort","setState","bar_list","GenerateBars","updateBarsFromState","bar_docs","getElementsByClassName","current_bars","j","length","push","color","style","backgroundColor","id","len","parseInt","height","i","timeouts","clearTimeout","colorpernum","makeGradient","grad","bars","set_bar_list","className","includes","classList","remove","add","updatebars","animations","counter","k","temp","temporary_color","num_compairsons","num_swaps","speed","Math","abs","value","test_init","test_1","setTimeout","first_index","second_index","state","componentDidMount","bind","render","JSON","parse","stringify","min","max","lst","random","getRandomInt","floor","number","colors","sleep","milliseconds","date","Date","now","currentDate","div_bars","state_bars","slice"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Bars from \"./Bars\";\n\n\nimport run_heapsort from \"./HeapSort\"\nimport run_quicksort from \"./QuickSort\"\nimport run_mergesort from \"./MergeSort\"\nimport selectionsort from \"./SelectionSort\"\nimport bubblesort from \"./BubbleSort\"\n\nvar num_bars = 200;\nconst min_bar = 10;\nconst max_bar = 500;\nconst color1 = '#005af6'; //(0, 123, 255)\nconst speed_max = 100;\nconst highlight_color = \"red\";\nconst gradient = true;\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      bar_list: GenerateBars(num_bars, min_bar, max_bar)\n    };\n\n  }\n\n  componentDidMount() {\n\n    this.stopCurrentSort = this.stopCurrentSort.bind(this);\n    this.updatebars = this.updatebars.bind(this);\n    this.updateBarsFromState = this.updateBarsFromState.bind(this);\n    this.clearCounters = this.clearCounters.bind(this);\n    this.timeouts = [];\n\n  }\n\n  clearCounters = () => {\n    document.getElementById('compairsons').innerText = 0;\n    document.getElementById('swaps').innerText = 0;\n    document.getElementById('total_ops').innerText = 0;\n  }\n\n  randomizebars = () => {\n    this.stopCurrentSort();\n    this.setState({\n      bar_list: GenerateBars(num_bars, min_bar, max_bar)\n    });\n    this.clearCounters();\n\n  }\n\n  //Update the bars based on the current state of bar_list\n  updateBarsFromState = () => {\n\n    var bar_docs = document.getElementsByClassName(\"bar\");\n    var current_bars = []\n    for (var j = 0; j < bar_docs.length; j++) {\n      current_bars.push({\n        color: bar_docs[j].style.backgroundColor,\n        id: j,\n        len: parseInt(bar_docs[j].style.height)\n      })\n    }\n    this.setState({bar_list: current_bars});\n\n  }\n\n  //Interrupts the current sorting process\n  stopCurrentSort = () => {\n\n    //Clear all timeouts\n    for (var i = 0; i < this.timeouts.length; i++) {\n      clearTimeout(this.timeouts[i]);\n    }\n\n    //Remove the bars that are currently red\n    var bar_docs = document.getElementsByClassName(\"bar\");\n    for (var i = 0; i < bar_docs.length; i++) {\n      if (bar_docs[i].style.backgroundColor === highlight_color) {\n        bar_docs[i].style.backgroundColor = colorpernum(min_bar, max_bar, parseInt(bar_docs[i].style.height));\n      }\n    }\n\n    //Update the current state with the bars that are visable\n    this.updateBarsFromState();\n  }\n\n  //Change bars when gradient button is pressed\n  makeGradient = () => {\n    var grad = document.getElementById(\"gradient_button\");\n\n    var bar_docs = document.getElementsByClassName(\"bar\");\n    var bars = set_bar_list(bar_docs);\n\n    //Make one color\n    if (grad.className.includes(\"active\")){\n      grad.classList.remove(\"active\");\n\n      for (var i = 0; i < bars.length; i++) {\n        bars[i][\"color\"] = color1;\n      }\n      this.setState({bar_list: bars});\n\n    //make gradient\n    }else{\n      grad.classList.add(\"active\");\n\n      for (var i = 0; i < bars.length; i++) {\n        bars[i][\"color\"] = colorpernum(min_bar,max_bar,bars[i][\"len\"]);\n      }\n\n\n    }\n\n\n\n  }\n\n  render() {\n    const {bar_list} = this.state;\n\n    return (<div>\n      <div id=\"UI_container\">\n        <div className=\"header\">\n          <div id=\"banner\">\n            <h1>Sorting Algorithm Visualizer</h1>\n          </div>\n          <div id=\"button_container\">\n            <button className=\"navbar_btn\" onClick={() => this.randomizebars()}>Randomize</button>\n            <button className=\"navbar_btn\" onClick={() => this.updatebars(selectionsort(JSON.parse(JSON.stringify(this.state.bar_list))))}>Selection Sort</button>\n            <button className=\"navbar_btn\" onClick={() => this.updatebars(run_mergesort((JSON.parse(JSON.stringify(this.state.bar_list)))))}>Merge Sort</button>\n            <button className=\"navbar_btn\" onClick={() => this.updatebars(run_quicksort((JSON.parse(JSON.stringify(this.state.bar_list)))))}>Quick Sort</button>\n            <button className=\"navbar_btn\" onClick={() => this.updatebars(run_heapsort((JSON.parse(JSON.stringify(this.state.bar_list)))))}>Heap Sort</button>\n            <button className=\"navbar_btn\" onClick={() => this.updatebars(bubblesort(JSON.parse(JSON.stringify(this.state.bar_list))))}>Bubble Sort</button>\n          </div>\n        </div>\n        <div className=\"bars_and_data\">\n\n          <div id=\"data_viz_outer\">\n            <div id=\"data_viz\">\n\n              <div id=\"counter_container\">\n                <div>\n                  <div className=\"data_header\">Number of compairsons\n                    <div className=\"data_caption\" id=\"compairsons\">0</div>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"data_header\">Number of swaps\n                    <div className=\"data_caption\" id=\"swaps\">0</div>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"data_header\">Total number of operations\n                    <div className=\"data_caption\" id=\"total_ops\">0</div>\n                  </div>\n                </div>\n              </div>\n\n              <div id=\"range_container\">\n\n                <div className=\"data_header\">Number of bars</div>\n                <input type=\"range\" className=\"slider\" id=\"numberange\" min=\"1\" max=\"100\" defaultValue=\"70\"></input>\n\n                <div className=\"data_header\">Sorting Speed</div>\n                <input type=\"range\" className=\"slider\" id=\"speedrange\" min=\"50\" max=\"100\" defaultValue='75'></input>\n\n              </div>\n              <div className=\"control_button_container\">\n\n                <button className=\"control_button\" onClick={() => this.randomizebars()}>Randomize Array</button>\n\n              </div>\n\n              <div className=\"control_button_container\">\n\n                <button className=\"control_button\" id=\"gradient_button\" onClick={() => this.makeGradient()}>Gradient</button>\n                <button className=\"control_button\" onClick={() => this.stopCurrentSort()}>Stop</button>\n\n              </div>\n\n            </div>\n          </div>\n          <div id=\"bar_container_outer\">\n            <Bars bar_list={bar_list}/>\n          </div>\n        </div>\n      </div>\n    </div>);\n  }\n\n  updatebars = (animations) => {\n    //console.log(animations);\n\n    this.clearCounters();\n\n    this.timeouts = [];\n\n    var bar_docs = document.getElementsByClassName(\"bar\");\n    var counter = 0;\n    var k = 0;\n\n    var temp;\n    var temporary_color = [0, 0]\n\n    var num_compairsons = 0;\n    var num_swaps = 0;\n\n    //linear\n    var speed = Math.abs((((-1 * (document.getElementById(\"speedrange\").value)) * speed_max / 100.0) + speed_max));\n\n    //testing\n    var test_init = [];\n    var test_1 = set_bar_list(bar_docs);\n    for (var i = 0; i < test_1.length; i++) {\n      test_init.push(test_1[i][\"color\"])\n    }\n    //console.log(test_init);\n\n\n    while (counter < animations.length) {\n\n\n\n      this.timeouts.push(setTimeout(() => {\n        var first_index = animations[k][0];\n        var second_index = animations[k][1];\n        //console.log(\"Bar Docs:\", bar_docs);\n        //console.log(first_index);\n\n\n        //If the while loop has begun then change the color of the last two bars back into what they were\n        if (k > 0) {\n\n          bar_docs[animations[k - 1][0]].style.backgroundColor = temporary_color[0];\n          bar_docs[animations[k - 1][1]].style.backgroundColor = temporary_color[1];\n\n        }\n\n        if (animations[k][2] === \"compare\") { //Compare the bars without swapping\n\n          temporary_color[0] = bar_docs[first_index].style.backgroundColor;\n          temporary_color[1] = bar_docs[second_index].style.backgroundColor;\n          bar_docs[first_index].style.backgroundColor = highlight_color;\n          bar_docs[second_index].style.backgroundColor = highlight_color;\n\n          num_compairsons += 1;\n          document.getElementById('compairsons').innerText = num_compairsons;\n\n        } else if (animations[k][2] === \"swap\") { //Swap the bars out\n\n          temp = bar_docs[first_index].style.height;\n          bar_docs[first_index].style.height = bar_docs[second_index].style.height;\n          bar_docs[second_index].style.height = temp;\n          temporary_color[0] = bar_docs[second_index].style.backgroundColor;\n          temporary_color[1] = bar_docs[first_index].style.backgroundColor;\n          bar_docs[first_index].style.backgroundColor = highlight_color;\n          bar_docs[second_index].style.backgroundColor = highlight_color;\n\n          num_swaps += 1;\n          document.getElementById('swaps').innerText = num_swaps;\n\n        } else if (animations[k][2] === \"mergesort swap\"){\n          //Only used my mergesort because the swapping is different\n\n          //store height and color of bars that are being changed\n          temporary_color[0] = bar_docs[second_index].style.backgroundColor;\n          temporary_color[1] = bar_docs[second_index - 1].style.backgroundColor;\n          temp = bar_docs[second_index].style.height;\n\n          //shift up the bars one place to the right\n            for (var i = second_index; i > first_index; i--) {\n                bar_docs[i].style.height = bar_docs[i - 1].style.height;\n                bar_docs[i].style.backgroundColor = bar_docs[i - 1].style.backgroundColor;\n              }\n          //update the height of the first index with the height of the second index bar\n          bar_docs[first_index].style.height = temp;\n\n          //highlight the bars being compared\n          bar_docs[first_index].style.backgroundColor = highlight_color;\n          bar_docs[second_index].style.backgroundColor = highlight_color;\n\n\n          num_swaps += 1;\n          document.getElementById('swaps').innerText = num_swaps;\n\n\n        }\n\n        if (k === animations.length - 1) {\n          //This occurs if it is the final animation\n          bar_docs[first_index].style.backgroundColor = temporary_color[0];\n          bar_docs[second_index].style.backgroundColor = temporary_color[1];\n\n          //update the bars in the current state\n          this.setState({bar_list: set_bar_list(bar_docs)});\n\n        }\n\n        document.getElementById('total_ops').innerText = num_swaps + num_compairsons;\n\n        k++;\n\n      }, counter * speed));\n      counter++;\n    };\n\n  }\n\n}\n\n//Helper Functions\n\nfunction GenerateBars(len, min, max) {\n  var lst = [];\n  for (var i = 0; i < len; i++) {\n    var random = getRandomInt(min, max);\n    lst.push({\n      id: i,\n      len: random,\n      color: colorpernum(min, max, random)\n    });\n    colorpernum(min, max, random);\n  }\n\n  return lst;\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction colorpernum(min, max, number) {\n\n  var colors = [0, 91, 246] /* Main Color */\n\n  if (gradient) {\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = Math.floor(colors[i] * (number - min) / (max - min));\n    }\n  }\n  var color = \"rgb(\" + colors[0] + \",\" + colors[1] + \",\" + colors[2] + \")\";\n\n\n  return color;\n}\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\n\nfunction set_bar_list(div_bars){\n    var state_bars = [];\n\n    for (var i = 0; i < div_bars.length; i++) {\n      state_bars.push({\"color\":div_bars[i].style.backgroundColor,\"id\":i,\"len\":parseInt((div_bars[i].style.height).slice(0,-2))});\n    }\n    return state_bars\n}\n"]},"metadata":{},"sourceType":"module"}