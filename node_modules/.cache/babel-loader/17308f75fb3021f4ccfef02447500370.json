{"ast":null,"code":"var _jsxFileName = \"/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/App.js\";\nimport React from \"react\";\nimport Bars from \"./Bars\";\nimport run_heapsort from \"./HeapSort\";\nimport run_quicksort from \"./QuickSort\";\nimport run_mergesort from \"./MergeSort\";\nimport selectionsort from \"./SelectionSort\";\nimport bubblesort from \"./BubbleSort\";\nvar num_bars = 200;\nconst min_bar = 10;\nconst max_bar = 500;\nconst color1 = '#005af6'; //(0, 123, 255)\n\nconst speed_max = 100;\nconst highlight_color = \"red\";\nconst gradient = true;\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.clearCounters = () => {\n      document.getElementById('compairsons').innerText = 0;\n      document.getElementById('swaps').innerText = 0;\n      document.getElementById('total_ops').innerText = 0;\n    };\n\n    this.randomizebars = () => {\n      this.stopCurrentSort();\n      this.setState({\n        bar_list: GenerateBars(document.getElementById(\"numberange\").value, min_bar, max_bar, 0)\n      });\n      this.clearCounters();\n    };\n\n    this.updateBarsFromState = () => {\n      var bar_docs = document.getElementsByClassName(\"bar\");\n      var current_bars = [];\n\n      for (var j = 0; j < bar_docs.length; j++) {\n        current_bars.push({\n          color: bar_docs[j].style.backgroundColor,\n          id: j,\n          len: parseInt(bar_docs[j].style.height)\n        });\n      }\n\n      this.setState({\n        bar_list: current_bars\n      });\n    };\n\n    this.stopCurrentSort = () => {\n      //Clear all timeouts\n      for (var i = 0; i < this.timeouts.length; i++) {\n        clearTimeout(this.timeouts[i]);\n      } //Remove the bars that are currently red\n\n\n      var bar_docs = document.getElementsByClassName(\"bar\");\n\n      for (var i = 0; i < bar_docs.length; i++) {\n        if (bar_docs[i].style.backgroundColor === highlight_color) {\n          bar_docs[i].style.backgroundColor = colorpernum(min_bar, max_bar, parseInt(bar_docs[i].style.height));\n        }\n      } //Update the current state with the bars that are visable\n\n\n      this.updateBarsFromState();\n    };\n\n    this.makeGradient = () => {\n      var grad = document.getElementById(\"gradient_button\");\n      var bar_docs = document.getElementsByClassName(\"bar\");\n      var bars = set_bar_list(bar_docs); //Make one color\n\n      if (grad.className.includes(\"active\")) {\n        grad.classList.remove(\"active\");\n\n        for (var i = 0; i < bars.length; i++) {\n          bars[i][\"color\"] = color1;\n        } //make gradient\n\n      } else {\n        grad.classList.add(\"active\");\n\n        for (var i = 0; i < bars.length; i++) {\n          bars[i][\"color\"] = colorpernum(min_bar, max_bar, bars[i][\"len\"]);\n        }\n      }\n\n      this.setState({\n        bar_list: bars\n      });\n    };\n\n    this.update_num_bars = () => {\n      this.stopCurrentSort();\n      var number_of_bars = document.getElementById(\"numberange\").value;\n      var bar_docs = document.getElementsByClassName(\"bar\");\n      var bars = set_bar_list(bar_docs);\n      var difference = number_of_bars - bars.length;\n\n      if (difference > 0) {\n        bars = bars.concat(GenerateBars(difference, min_bar, max_bar, bars.length));\n        this.setState({\n          bar_list: bars\n        });\n      } else {\n        bars = bars.splice(0, bars.length + difference);\n        this.setState({\n          bar_list: bars\n        });\n      }\n    };\n\n    this.updatebars = animations => {\n      //console.log(animations);\n      this.clearCounters();\n      this.stopCurrentSort();\n      this.timeouts = []; //this.currentanimations = [(JSON.parse(JSON.stringify(animations))),0];\n\n      var bar_docs = document.getElementsByClassName(\"bar\");\n      var counter = 0;\n      var k = 0;\n      var temp;\n      var temporary_color = [0, 0];\n      var num_compairsons = 0;\n      var num_swaps = 0; //linear\n\n      var speed = Math.abs(-1 * document.getElementById(\"speedrange\").value * speed_max / 100.0 + speed_max);\n\n      while (counter < animations.length) {\n        this.timeouts.push(setTimeout(() => {\n          var first_index = animations[k][0];\n          var second_index = animations[k][1]; //console.log(\"Bar Docs:\", bar_docs);\n          //console.log(first_index);\n          //If the while loop has begun then change the color of the last two bars back into what they were\n\n          if (k > 0) {\n            bar_docs[animations[k - 1][0]].style.backgroundColor = temporary_color[0];\n            bar_docs[animations[k - 1][1]].style.backgroundColor = temporary_color[1];\n          }\n\n          if (animations[k][2] === \"compare\") {\n            //Compare the bars without swapping\n            temporary_color[0] = bar_docs[first_index].style.backgroundColor;\n            temporary_color[1] = bar_docs[second_index].style.backgroundColor;\n            bar_docs[first_index].style.backgroundColor = highlight_color;\n            bar_docs[second_index].style.backgroundColor = highlight_color;\n            num_compairsons += 1;\n            document.getElementById('compairsons').innerText = num_compairsons;\n          } else if (animations[k][2] === \"swap\") {\n            //Swap the bars out\n            temp = bar_docs[first_index].style.height;\n            bar_docs[first_index].style.height = bar_docs[second_index].style.height;\n            bar_docs[second_index].style.height = temp;\n            temporary_color[0] = bar_docs[second_index].style.backgroundColor;\n            temporary_color[1] = bar_docs[first_index].style.backgroundColor;\n            bar_docs[first_index].style.backgroundColor = highlight_color;\n            bar_docs[second_index].style.backgroundColor = highlight_color;\n            num_swaps += 1;\n            document.getElementById('swaps').innerText = num_swaps;\n          } else if (animations[k][2] === \"mergesort swap\") {\n            //Only used my mergesort because the swapping is different\n            //store height and color of bars that are being changed\n            temporary_color[0] = bar_docs[second_index].style.backgroundColor;\n            temporary_color[1] = bar_docs[second_index - 1].style.backgroundColor;\n            temp = bar_docs[second_index].style.height; //shift up the bars one place to the right\n\n            for (var i = second_index; i > first_index; i--) {\n              bar_docs[i].style.height = bar_docs[i - 1].style.height;\n              bar_docs[i].style.backgroundColor = bar_docs[i - 1].style.backgroundColor;\n            } //update the height of the first index with the height of the second index bar\n\n\n            bar_docs[first_index].style.height = temp; //highlight the bars being compared\n\n            bar_docs[first_index].style.backgroundColor = highlight_color;\n            bar_docs[second_index].style.backgroundColor = highlight_color;\n            num_swaps += 1;\n            document.getElementById('swaps').innerText = num_swaps;\n          }\n\n          if (k === animations.length - 1) {\n            //This occurs if it is the final animation\n            bar_docs[first_index].style.backgroundColor = temporary_color[0];\n            bar_docs[second_index].style.backgroundColor = temporary_color[1]; //update the bars in the current state\n\n            this.setState({\n              bar_list: set_bar_list(bar_docs)\n            });\n          }\n\n          document.getElementById('total_ops').innerText = num_swaps + num_compairsons; //this.currentanimations[1] += 1;\n\n          k++;\n        }, counter * speed));\n        counter++;\n      }\n\n      ;\n    };\n\n    this.state = {\n      bar_list: GenerateBars(num_bars, min_bar, max_bar, 0)\n    };\n  }\n\n  componentDidMount() {\n    this.stopCurrentSort = this.stopCurrentSort.bind(this);\n    this.updatebars = this.updatebars.bind(this);\n    this.updateBarsFromState = this.updateBarsFromState.bind(this);\n    this.clearCounters = this.clearCounters.bind(this);\n    this.timeouts = [];\n    this.currentanimations = [];\n  }\n\n  //Update the speed of the current sort TOO SLOW FOR PRODUCTION\n\n  /*\n  update_sort_speed = () => {\n    if (this.currentanimations !== []){\n       this.stopCurrentSort();\n      var animations =  this.currentanimations[0];\n      var current_num = this.currentanimations[1];\n      animations.splice(0, this.currentanimations[1]);\n      //console.log(animations);\n      //console.log(current_num);\n      this.updatebars(animations);\n     }\n  \n  }\n  */\n  render() {\n    const {\n      bar_list\n    } = this.state;\n    return React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, React.createElement(\"div\", {\n      id: \"UI_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }, React.createElement(\"div\", {\n      id: \"banner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }\n    }, React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, \"Sorting Algorithm Visualizer\")), React.createElement(\"div\", {\n      id: \"button_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.updatebars(selectionsort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, \"Selection Sort\"), React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.updatebars(run_mergesort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.updatebars(run_quicksort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.updatebars(run_heapsort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      className: \"navbar_btn\",\n      onClick: () => this.updatebars(bubblesort(JSON.parse(JSON.stringify(this.state.bar_list)))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\"))), React.createElement(\"div\", {\n      className: \"bars_and_data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }\n    }, React.createElement(\"div\", {\n      id: \"data_viz_outer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }\n    }, React.createElement(\"div\", {\n      id: \"data_viz\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    }, React.createElement(\"div\", {\n      id: \"counter_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }, React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }, React.createElement(\"div\", {\n      className: \"data_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 19\n      }\n    }, \"Number of compairsons\", React.createElement(\"div\", {\n      className: \"data_caption\",\n      id: \"compairsons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }, \"0\"))), React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, React.createElement(\"div\", {\n      className: \"data_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }\n    }, \"Number of swaps\", React.createElement(\"div\", {\n      className: \"data_caption\",\n      id: \"swaps\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }, \"0\"))), React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }, React.createElement(\"div\", {\n      className: \"data_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }\n    }, \"Total number of operations\", React.createElement(\"div\", {\n      className: \"data_caption\",\n      id: \"total_ops\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }, \"0\")))), React.createElement(\"div\", {\n      id: \"range_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 15\n      }\n    }, React.createElement(\"div\", {\n      className: \"data_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, \"Number of bars\"), React.createElement(\"input\", {\n      type: \"range\",\n      className: \"slider\",\n      id: \"numberange\",\n      min: \"20\",\n      max: \"1000\",\n      defaultValue: num_bars,\n      onChange: this.update_num_bars,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }), React.createElement(\"div\", {\n      className: \"data_header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }, \"Sorting Speed\"), React.createElement(\"input\", {\n      type: \"range\",\n      className: \"slider\",\n      id: \"speedrange\",\n      min: \"50\",\n      max: \"100\",\n      defaultValue: \"75\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    })), React.createElement(\"div\", {\n      className: \"control_button_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }, React.createElement(\"button\", {\n      className: \"control_button active\",\n      id: \"gradient_button\",\n      onClick: () => this.makeGradient(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }, \"Gradient\")), React.createElement(\"div\", {\n      className: \"control_button_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 15\n      }\n    }, React.createElement(\"button\", {\n      className: \"control_button\",\n      onClick: () => this.randomizebars(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }, \"Randomize\"), React.createElement(\"button\", {\n      className: \"control_button\",\n      onClick: () => this.stopCurrentSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, \"Stop\")))), React.createElement(\"div\", {\n      id: \"bar_container_outer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }, React.createElement(Bars, {\n      bar_list: bar_list,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n} //Helper Functions\n\nfunction GenerateBars(len, min, max, start) {\n  var grad = document.getElementById(\"gradient_button\");\n  var lst = [];\n\n  if (grad !== null && !grad.className.includes(\"active\")) {\n    for (var i = 0; i < len; i++) {\n      var random = getRandomInt(min, max);\n      lst.push({\n        id: i + start,\n        len: random,\n        color: color1\n      });\n    }\n  } else {\n    for (var i = 0; i < len; i++) {\n      var random = getRandomInt(min, max);\n      lst.push({\n        id: i + start,\n        len: random,\n        color: colorpernum(min, max, random)\n      });\n    }\n  }\n\n  return lst;\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction colorpernum(min, max, number) {\n  var colors = [0, 91, 246];\n  /* Main Color */\n\n  for (var i = 0; i < colors.length; i++) {\n    colors[i] = Math.floor(colors[i] * (number - min) / (max - min));\n  }\n\n  var color = \"rgb(\" + colors[0] + \",\" + colors[1] + \",\" + colors[2] + \")\";\n  return color;\n}\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nfunction set_bar_list(div_bars) {\n  var state_bars = [];\n\n  for (var i = 0; i < div_bars.length; i++) {\n    state_bars.push({\n      \"color\": div_bars[i].style.backgroundColor,\n      \"id\": i,\n      \"len\": parseInt(div_bars[i].style.height.slice(0, -2))\n    });\n  }\n\n  return state_bars;\n}","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/App.js"],"names":["React","Bars","run_heapsort","run_quicksort","run_mergesort","selectionsort","bubblesort","num_bars","min_bar","max_bar","color1","speed_max","highlight_color","gradient","App","Component","constructor","props","clearCounters","document","getElementById","innerText","randomizebars","stopCurrentSort","setState","bar_list","GenerateBars","value","updateBarsFromState","bar_docs","getElementsByClassName","current_bars","j","length","push","color","style","backgroundColor","id","len","parseInt","height","i","timeouts","clearTimeout","colorpernum","makeGradient","grad","bars","set_bar_list","className","includes","classList","remove","add","update_num_bars","number_of_bars","difference","concat","splice","updatebars","animations","counter","k","temp","temporary_color","num_compairsons","num_swaps","speed","Math","abs","setTimeout","first_index","second_index","state","componentDidMount","bind","currentanimations","render","JSON","parse","stringify","min","max","start","lst","random","getRandomInt","floor","number","colors","sleep","milliseconds","date","Date","now","currentDate","div_bars","state_bars","slice"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Bars from \"./Bars\";\n\n\nimport run_heapsort from \"./HeapSort\"\nimport run_quicksort from \"./QuickSort\"\nimport run_mergesort from \"./MergeSort\"\nimport selectionsort from \"./SelectionSort\"\nimport bubblesort from \"./BubbleSort\"\n\nvar num_bars = 200;\nconst min_bar = 10;\nconst max_bar = 500;\nconst color1 = '#005af6'; //(0, 123, 255)\nconst speed_max = 100;\nconst highlight_color = \"red\";\nconst gradient = true;\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      bar_list: GenerateBars(num_bars, min_bar, max_bar, 0)\n    };\n\n  }\n\n  componentDidMount() {\n\n    this.stopCurrentSort = this.stopCurrentSort.bind(this);\n    this.updatebars = this.updatebars.bind(this);\n    this.updateBarsFromState = this.updateBarsFromState.bind(this);\n    this.clearCounters = this.clearCounters.bind(this);\n    this.timeouts = [];\n    this.currentanimations = [];\n\n  }\n\n  clearCounters = () => {\n    document.getElementById('compairsons').innerText = 0;\n    document.getElementById('swaps').innerText = 0;\n    document.getElementById('total_ops').innerText = 0;\n  }\n\n  randomizebars = () => {\n    this.stopCurrentSort();\n    this.setState({\n      bar_list: GenerateBars(document.getElementById(\"numberange\").value, min_bar, max_bar, 0)\n    });\n    this.clearCounters();\n\n  }\n\n  //Update the bars based on the current state of bar_list\n  updateBarsFromState = () => {\n\n    var bar_docs = document.getElementsByClassName(\"bar\");\n    var current_bars = []\n    for (var j = 0; j < bar_docs.length; j++) {\n      current_bars.push({\n        color: bar_docs[j].style.backgroundColor,\n        id: j,\n        len: parseInt(bar_docs[j].style.height)\n      })\n    }\n    this.setState({bar_list: current_bars});\n\n  }\n\n  //Interrupts the current sorting process\n  stopCurrentSort = () => {\n\n    //Clear all timeouts\n    for (var i = 0; i < this.timeouts.length; i++) {\n      clearTimeout(this.timeouts[i]);\n    }\n\n    //Remove the bars that are currently red\n    var bar_docs = document.getElementsByClassName(\"bar\");\n    for (var i = 0; i < bar_docs.length; i++) {\n      if (bar_docs[i].style.backgroundColor === highlight_color) {\n        bar_docs[i].style.backgroundColor = colorpernum(min_bar, max_bar, parseInt(bar_docs[i].style.height));\n      }\n    }\n\n    //Update the current state with the bars that are visable\n    this.updateBarsFromState();\n  }\n\n  //Change bars when gradient button is pressed\n  makeGradient = () => {\n\n    var grad = document.getElementById(\"gradient_button\");\n\n    var bar_docs = document.getElementsByClassName(\"bar\");\n    var bars = set_bar_list(bar_docs);\n\n    //Make one color\n    if (grad.className.includes(\"active\")){\n\n        grad.classList.remove(\"active\");\n        for (var i = 0; i < bars.length; i++) {\n          bars[i][\"color\"] = color1;\n        }\n\n    //make gradient\n    }else{\n\n        grad.classList.add(\"active\");\n        for (var i = 0; i < bars.length; i++) {\n          bars[i][\"color\"] = colorpernum(min_bar,max_bar,bars[i][\"len\"]);\n        }\n    }\n\n    this.setState({bar_list: bars});\n\n  }\n\n  //Update the number of bars from the slider\n  update_num_bars = () => {\n    this.stopCurrentSort();\n    var number_of_bars = document.getElementById(\"numberange\").value;\n\n    var bar_docs = document.getElementsByClassName(\"bar\");\n    var bars = set_bar_list(bar_docs);\n\n    var difference = number_of_bars - bars.length;\n\n    if (difference > 0){\n      bars = bars.concat(GenerateBars(difference, min_bar, max_bar, bars.length));\n      this.setState({bar_list: bars});\n\n    }else{\n      bars = bars.splice(0, bars.length + difference);\n      this.setState({bar_list: bars});\n\n    }\n\n\n  }\n\n  //Update the speed of the current sort TOO SLOW FOR PRODUCTION\n  /*\n  update_sort_speed = () => {\n    if (this.currentanimations !== []){\n\n      this.stopCurrentSort();\n      var animations =  this.currentanimations[0];\n      var current_num = this.currentanimations[1];\n      animations.splice(0, this.currentanimations[1]);\n      //console.log(animations);\n      //console.log(current_num);\n      this.updatebars(animations);\n\n    }\n\n\n\n  }\n  */\n\n  render() {\n    const {bar_list} = this.state;\n\n    return (<div>\n      <div id=\"UI_container\">\n        <div className=\"header\">\n          <div id=\"banner\">\n            <h1>Sorting Algorithm Visualizer</h1>\n          </div>\n          <div id=\"button_container\">\n            <button className=\"navbar_btn\" onClick={() => this.updatebars(selectionsort(JSON.parse(JSON.stringify(this.state.bar_list))))}>Selection Sort</button>\n            <button className=\"navbar_btn\" onClick={() => this.updatebars(run_mergesort((JSON.parse(JSON.stringify(this.state.bar_list)))))}>Merge Sort</button>\n            <button className=\"navbar_btn\" onClick={() => this.updatebars(run_quicksort((JSON.parse(JSON.stringify(this.state.bar_list)))))}>Quick Sort</button>\n            <button className=\"navbar_btn\" onClick={() => this.updatebars(run_heapsort((JSON.parse(JSON.stringify(this.state.bar_list)))))}>Heap Sort</button>\n            <button className=\"navbar_btn\" onClick={() => this.updatebars(bubblesort(JSON.parse(JSON.stringify(this.state.bar_list))))}>Bubble Sort</button>\n          </div>\n        </div>\n        <div className=\"bars_and_data\">\n\n          <div id=\"data_viz_outer\">\n            <div id=\"data_viz\">\n\n              <div id=\"counter_container\">\n                <div>\n                  <div className=\"data_header\">Number of compairsons\n                    <div className=\"data_caption\" id=\"compairsons\">0</div>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"data_header\">Number of swaps\n                    <div className=\"data_caption\" id=\"swaps\">0</div>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"data_header\">Total number of operations\n                    <div className=\"data_caption\" id=\"total_ops\">0</div>\n                  </div>\n                </div>\n              </div>\n\n              <div id=\"range_container\">\n\n                <div className=\"data_header\">Number of bars</div>\n                <input type=\"range\" className=\"slider\" id=\"numberange\" min=\"20\" max=\"1000\" defaultValue={num_bars} onChange={this.update_num_bars}></input>\n\n                <div className=\"data_header\">Sorting Speed</div>\n                <input type=\"range\" className=\"slider\" id=\"speedrange\" min=\"50\" max=\"100\" defaultValue='75'></input>\n\n              </div>\n              <div className=\"control_button_container\">\n                <button className=\"control_button active\" id=\"gradient_button\" onClick={() => this.makeGradient()}>Gradient</button>\n              </div>\n\n              <div className=\"control_button_container\">\n\n                <button className=\"control_button\" onClick={() => this.randomizebars()}>Randomize</button>\n                <button className=\"control_button\" onClick={() => this.stopCurrentSort()}>Stop</button>\n\n              </div>\n\n            </div>\n          </div>\n          <div id=\"bar_container_outer\">\n            <Bars bar_list={bar_list}/>\n          </div>\n        </div>\n      </div>\n    </div>);\n  }\n\n  updatebars = (animations) => {\n    //console.log(animations);\n\n    this.clearCounters();\n    this.stopCurrentSort();\n\n    this.timeouts = [];\n    //this.currentanimations = [(JSON.parse(JSON.stringify(animations))),0];\n\n    var bar_docs = document.getElementsByClassName(\"bar\");\n    var counter = 0;\n    var k = 0;\n\n    var temp;\n    var temporary_color = [0, 0]\n\n    var num_compairsons = 0;\n    var num_swaps = 0;\n\n    //linear\n    var speed = Math.abs((((-1 * (document.getElementById(\"speedrange\").value)) * speed_max / 100.0) + speed_max));\n\n\n\n    while (counter < animations.length) {\n\n\n\n      this.timeouts.push(setTimeout(() => {\n        var first_index = animations[k][0];\n        var second_index = animations[k][1];\n        //console.log(\"Bar Docs:\", bar_docs);\n        //console.log(first_index);\n\n\n        //If the while loop has begun then change the color of the last two bars back into what they were\n        if (k > 0) {\n\n          bar_docs[animations[k - 1][0]].style.backgroundColor = temporary_color[0];\n          bar_docs[animations[k - 1][1]].style.backgroundColor = temporary_color[1];\n\n        }\n\n        if (animations[k][2] === \"compare\") { //Compare the bars without swapping\n\n          temporary_color[0] = bar_docs[first_index].style.backgroundColor;\n          temporary_color[1] = bar_docs[second_index].style.backgroundColor;\n          bar_docs[first_index].style.backgroundColor = highlight_color;\n          bar_docs[second_index].style.backgroundColor = highlight_color;\n\n          num_compairsons += 1;\n          document.getElementById('compairsons').innerText = num_compairsons;\n\n        } else if (animations[k][2] === \"swap\") { //Swap the bars out\n\n          temp = bar_docs[first_index].style.height;\n          bar_docs[first_index].style.height = bar_docs[second_index].style.height;\n          bar_docs[second_index].style.height = temp;\n          temporary_color[0] = bar_docs[second_index].style.backgroundColor;\n          temporary_color[1] = bar_docs[first_index].style.backgroundColor;\n          bar_docs[first_index].style.backgroundColor = highlight_color;\n          bar_docs[second_index].style.backgroundColor = highlight_color;\n\n          num_swaps += 1;\n          document.getElementById('swaps').innerText = num_swaps;\n\n        } else if (animations[k][2] === \"mergesort swap\"){\n          //Only used my mergesort because the swapping is different\n\n          //store height and color of bars that are being changed\n          temporary_color[0] = bar_docs[second_index].style.backgroundColor;\n          temporary_color[1] = bar_docs[second_index - 1].style.backgroundColor;\n          temp = bar_docs[second_index].style.height;\n\n          //shift up the bars one place to the right\n            for (var i = second_index; i > first_index; i--) {\n                bar_docs[i].style.height = bar_docs[i - 1].style.height;\n                bar_docs[i].style.backgroundColor = bar_docs[i - 1].style.backgroundColor;\n              }\n          //update the height of the first index with the height of the second index bar\n          bar_docs[first_index].style.height = temp;\n\n          //highlight the bars being compared\n          bar_docs[first_index].style.backgroundColor = highlight_color;\n          bar_docs[second_index].style.backgroundColor = highlight_color;\n\n\n          num_swaps += 1;\n          document.getElementById('swaps').innerText = num_swaps;\n\n\n        }\n\n        if (k === animations.length - 1) {\n          //This occurs if it is the final animation\n          bar_docs[first_index].style.backgroundColor = temporary_color[0];\n          bar_docs[second_index].style.backgroundColor = temporary_color[1];\n\n          //update the bars in the current state\n          this.setState({bar_list: set_bar_list(bar_docs)});\n\n        }\n\n        document.getElementById('total_ops').innerText = num_swaps + num_compairsons;\n\n        //this.currentanimations[1] += 1;\n\n        k++;\n\n\n      }, counter * speed));\n      counter++;\n    };\n\n  }\n\n}\n\n//Helper Functions\n\nfunction GenerateBars(len, min, max, start) {\n  var grad = document.getElementById(\"gradient_button\");\n  var lst = [];\n\n\n  if (grad !== null && !grad.className.includes(\"active\")){\n        for (var i = 0; i < len; i++) {\n          var random = getRandomInt(min, max);\n          lst.push({\n            id: i + start,\n            len: random,\n            color: color1\n          });\n        }\n\n  }else{\n    for (var i = 0; i < len; i++) {\n      var random = getRandomInt(min, max);\n      lst.push({\n        id: i + start,\n        len: random,\n        color: colorpernum(min, max, random)\n      });\n    }\n  }\n\n  return lst;\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction colorpernum(min, max, number) {\n\n  var colors = [0, 91, 246] /* Main Color */\n\n    for (var i = 0; i < colors.length; i++) {\n        colors[i] = Math.floor(colors[i] * (number - min) / (max - min));\n    }\n  var color = \"rgb(\" + colors[0] + \",\" + colors[1] + \",\" + colors[2] + \")\";\n\n\n  return color;\n}\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\n\nfunction set_bar_list(div_bars){\n    var state_bars = [];\n\n    for (var i = 0; i < div_bars.length; i++) {\n      state_bars.push({\"color\":div_bars[i].style.backgroundColor,\"id\":i,\"len\":parseInt((div_bars[i].style.height).slice(0,-2))});\n    }\n    return state_bars\n}\n"]},"metadata":{},"sourceType":"module"}