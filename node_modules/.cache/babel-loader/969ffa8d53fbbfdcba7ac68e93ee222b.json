{"ast":null,"code":"function mergesort(i, start, end) {\n  if (end - start === 1) {\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n  console.log(i);\n  i = mergesort(i, start, start + length_of_list);\n  i = mergesort(i, start + length_of_list, end);\n  i = merge(i, start, start + length_of_list, end);\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i) {\n  var left = main.slice(start_i, mid_i);\n  var right = main.slice(mid_i, end_i);\n  var len_l = left.length;\n  var len_r = right.length;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var result = [];\n\n  while (i <= len_l & j <= len_r) {\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n\n    k += 1;\n  }\n\n  while (i <= len_l) {\n    result.push(left[i]);\n    i += 1;\n  }\n\n  while (j <= len_r) {\n    result.push(right[j]);\n    j += 1;\n  }\n\n  return result;\n}\n\nexport default mergesort;\n\nfunction test() {\n  var test1 = [];\n  var test2 = [];\n\n  for (var i = 0; i < 3; i++) {\n    test1 = [];\n    test2 = [];\n\n    for (var j = 0; j < getRandomInt(1, 20); j++) {\n      var num = getRandomInt(0, 100);\n      test1.push(num);\n      test2.push(num);\n    }\n\n    test1.sort((a, b) => a - b);\n    console.log(mergesort(test2));\n    console.log(test1);\n    console.log(\"\");\n  }\n}\n\ntest();\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n/*\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n\n\n  var len_i = Math.floor(i.length / 2);\n\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n*/","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["mergesort","i","start","end","length_of_list","Math","floor","console","log","merge","main","start_i","mid_i","end_i","left","slice","right","len_l","length","len_r","j","k","result","push","test","test1","test2","getRandomInt","num","sort","a","b","min","max","random"],"mappings":"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","sourcesContent":["\n\nfunction mergesort(i, start, end) {\n\n  if (end - start === 1){\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n\n  console.log(i);\n\n  i = mergesort(i, start, start + length_of_list);\n  i = mergesort(i, start + length_of_list, end);\n\n  i = merge(i, start, start + length_of_list, end);\n\n\n\n  return i;\n\n\n}\n\nfunction merge(main, start_i, mid_i, end_i) {\n\n  var left = main.slice(start_i, mid_i);\n  var right = main.slice(mid_i, end_i);\n\n  var len_l = left.length;\n  var len_r = right.length;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\nexport default mergesort;\n\n\nfunction test(){\n\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 3; i++) {\n    test1 = []\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1,20); j++) {\n      var num = getRandomInt(0,100)\n      test1.push(num);\n      test2.push(num);\n    }\n    test1.sort((a,b) => a-b);\n\n    console.log(mergesort(test2));\n    console.log(test1);\n    console.log(\"\");\n\n  }\n\n}\ntest()\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n\n\n  var len_i = Math.floor(i.length / 2);\n\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n*/\n"]},"metadata":{},"sourceType":"module"}