{"ast":null,"code":"//import React from 'react';\nfunction selectionsort(bar_list_1) {\n  //animation list: nested arrays contain the two items being compared and\n  // a third item that if it exists is another array of two items that must\n  //be interchanged\n  var animations = [];\n  var current_index = 0;\n  var n = bar_list.length;\n\n  while (current_index < n - 1) {\n    var lowest = bar_list[current_index];\n    var lowest_index;\n\n    for (var i = current_index; i < n; i++) {\n      animations.push([lowest['id'], bar_list[i]['id'], 0]);\n\n      if (bar_list[i]['len'] <= lowest['len']) {\n        lowest = bar_list[i];\n        lowest_index = i;\n      }\n    }\n\n    animations.push([lowest['id'], bar_list[current_index]['id'], 1]);\n    bar_list[lowest_index] = bar_list[current_index];\n    bar_list[current_index] = lowest;\n    current_index++;\n  } //console.log(animations);\n\n\n  for (var i = 0; i < bar_list.length; i++) {\n    console.log(bar_list[i][\"len\"]);\n  }\n\n  return [bar_list];\n}\n\nexport default selectionsort;","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/SelectionSort.js"],"names":["selectionsort","bar_list_1","animations","current_index","n","bar_list","length","lowest","lowest_index","i","push","console","log"],"mappings":"AAAA;AAEA,SAASA,aAAT,CAAuBC,UAAvB,EAAmC;AACjC;AACA;AACA;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,CAAC,GAAGC,QAAQ,CAACC,MAAjB;;AAEA,SAAOH,aAAa,GAAGC,CAAC,GAAC,CAAzB,EAA4B;AAC1B,QAAIG,MAAM,GAAGF,QAAQ,CAACF,aAAD,CAArB;AACA,QAAIK,YAAJ;;AAEE,SAAK,IAAIC,CAAC,GAAGN,aAAb,EAA4BM,CAAC,GAAGL,CAAhC,EAAmCK,CAAC,EAApC,EAAwC;AACtCP,MAAAA,UAAU,CAACQ,IAAX,CAAgB,CAACH,MAAM,CAAC,IAAD,CAAP,EAAcF,QAAQ,CAACI,CAAD,CAAR,CAAY,IAAZ,CAAd,EAAgC,CAAhC,CAAhB;;AACA,UAAIJ,QAAQ,CAACI,CAAD,CAAR,CAAY,KAAZ,KAAsBF,MAAM,CAAC,KAAD,CAAhC,EAAwC;AACtCA,QAAAA,MAAM,GAAGF,QAAQ,CAACI,CAAD,CAAjB;AACAD,QAAAA,YAAY,GAAGC,CAAf;AACD;AACF;;AACDP,IAAAA,UAAU,CAACQ,IAAX,CAAgB,CAACH,MAAM,CAAC,IAAD,CAAP,EAAcF,QAAQ,CAACF,aAAD,CAAR,CAAwB,IAAxB,CAAd,EAA4C,CAA5C,CAAhB;AACAE,IAAAA,QAAQ,CAACG,YAAD,CAAR,GAAyBH,QAAQ,CAACF,aAAD,CAAjC;AACAE,IAAAA,QAAQ,CAACF,aAAD,CAAR,GAA0BI,MAA1B;AACAJ,IAAAA,aAAa;AAEhB,GAxBgC,CAyBjC;;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACC,MAA7B,EAAqCG,CAAC,EAAtC,EAA0C;AACxCE,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAQ,CAACI,CAAD,CAAR,CAAY,KAAZ,CAAZ;AACD;;AACD,SAAO,CAACJ,QAAD,CAAP;AAGD;;AACD,eAAeL,aAAf","sourcesContent":["//import React from 'react';\n\nfunction selectionsort(bar_list_1) {\n  //animation list: nested arrays contain the two items being compared and\n  // a third item that if it exists is another array of two items that must\n  //be interchanged\n  var animations = [];\n  var current_index = 0;\n  var n = bar_list.length;\n\n  while (current_index < n-1) {\n    var lowest = bar_list[current_index];\n    var lowest_index;\n\n      for (var i = current_index; i < n; i++) {\n        animations.push([lowest['id'],bar_list[i]['id'],0]);\n        if (bar_list[i]['len'] <= lowest['len']){\n          lowest = bar_list[i];\n          lowest_index = i;\n        }\n      }\n      animations.push([lowest['id'],bar_list[current_index]['id'],1]);\n      bar_list[lowest_index] = bar_list[current_index];\n      bar_list[current_index] = lowest;\n      current_index++;\n\n  }\n  //console.log(animations);\n  for (var i = 0; i < bar_list.length; i++) {\n    console.log(bar_list[i][\"len\"]);\n  }\n  return [bar_list];\n\n\n}\nexport default selectionsort;\n"]},"metadata":{},"sourceType":"module"}