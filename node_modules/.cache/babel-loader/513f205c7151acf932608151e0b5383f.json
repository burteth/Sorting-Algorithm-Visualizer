{"ast":null,"code":"function mergesort(i, start, end, count) {\n  if (end - start === 1) {\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n  console.log(i);\n  console.log(length_of_list);\n  i = mergesort(JSON.parse(JSON.stringify(i)), start, start + length_of_list);\n  i = mergesort(JSON.parse(JSON.stringify(i)), start + length_of_list, end);\n  i = merge(JSON.parse(JSON.stringify(i)), start, start + length_of_list, end);\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i) {\n  var left = main.slice(start_i, mid_i);\n  var right = main.slice(mid_i, end_i);\n  var len_l = left.length;\n  var len_r = right.length;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var result = [];\n\n  while (i <= len_l & j <= len_r) {\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n\n    k += 1;\n  }\n\n  while (i <= len_l) {\n    result.push(left[i]);\n    i += 1;\n  }\n\n  while (j <= len_r) {\n    result.push(right[j]);\n    j += 1;\n  }\n\n  return result;\n}\n\nexport default mergesort;\n\nfunction test() {\n  /*\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 3; i++) {\n    test1 = []\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1,20); j++) {\n      var num = getRandomInt(0,100)\n      test1.push(num);\n      test2.push(num);\n    }\n    test1.sort((a,b) => a-b);\n     console.log(mergesort(test2));\n    console.log(test1);\n    console.log(\"\");\n    */\n  console.log(mergesort([2, 5, 24, 29, 44, 3, 7]));\n}\n\ntest();\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n/*\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n\n\n  var len_i = Math.floor(i.length / 2);\n\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n*/","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["mergesort","i","start","end","count","length_of_list","Math","floor","console","log","JSON","parse","stringify","merge","main","start_i","mid_i","end_i","left","slice","right","len_l","length","len_r","j","k","result","push","test","getRandomInt","min","max","random"],"mappings":"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","sourcesContent":["\n\nfunction mergesort(i, start, end, count) {\n\n  if (end - start === 1){\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n\n  console.log(i);\n  console.log(length_of_list,);\n\n  i = mergesort(JSON.parse(JSON.stringify(i)), start, start + length_of_list);\n  i = mergesort(JSON.parse(JSON.stringify(i)), start + length_of_list, end);\n\n  i = merge(JSON.parse(JSON.stringify(i)), start, start + length_of_list, end);\n\n\n\n  return i;\n\n\n}\n\nfunction merge(main, start_i, mid_i, end_i) {\n\n  var left = main.slice(start_i, mid_i);\n  var right = main.slice(mid_i, end_i);\n\n  var len_l = left.length;\n  var len_r = right.length;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\nexport default mergesort;\n\n\nfunction test(){\n  /*\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 3; i++) {\n    test1 = []\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1,20); j++) {\n      var num = getRandomInt(0,100)\n      test1.push(num);\n      test2.push(num);\n    }\n    test1.sort((a,b) => a-b);\n\n    console.log(mergesort(test2));\n    console.log(test1);\n    console.log(\"\");\n    */\n   console.log(mergesort([2,5,24,29,44,3,7]));\n\n}\n\ntest()\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n\n\n  var len_i = Math.floor(i.length / 2);\n\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n*/\n"]},"metadata":{},"sourceType":"module"}