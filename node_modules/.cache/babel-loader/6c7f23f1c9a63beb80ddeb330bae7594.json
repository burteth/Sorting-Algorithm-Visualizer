{"ast":null,"code":"function run_mergesort(bar_list) {\n  var animations = [];\n  var arr = [];\n\n  for (var i = 0; i < bar_list.length; i++) {\n    arr.push(bar_list[i]['len']);\n  }\n\n  console.log(arr); //var sorted = mergesort(bar_list,)\n}\n\nfunction mergesort(i, start, end, animations) {\n  if (end - start === 1) {\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n  console.log(i); //console.log(\"Length: \",length_of_list);\n\n  console.log(\"Start: \", start, \" End: \", end);\n  console.log(\"Sliced:\", i.slice(start, end));\n  console.log(\" \");\n  i = mergesort(JSON.parse(JSON.stringify(i)), start, start + length_of_list, animations);\n  i = mergesort(JSON.parse(JSON.stringify(i)), start + length_of_list, end, animations);\n  i = merge(JSON.parse(JSON.stringify(i)), start, start + length_of_list, end, animations);\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i, animations) {\n  console.log(\"Real:\", main);\n  console.log(\"Left:\", main.slice(start_i, mid_i));\n  console.log(\"Right:\", main.slice(mid_i, end_i));\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var result = [];\n\n  while (i < len_l & j < len_r) {\n    console.log(main[i + start_i], 'compared to', main[j + mid_i]); //animations.push([i + start_i, j + mid_i, 0])\n\n    if (main[i + start_i] <= main[j + mid_i]) {\n      result.push(main[i + start_i]);\n      animations.push([i + start_i, j + mid_i, 1]);\n      i += 1;\n    } else {\n      result.push(main[j + mid_i]);\n      animations.push([i + start_i, j + mid_i, 1]);\n      j += 1;\n    }\n\n    k += 1;\n  }\n\n  while (i < len_l) {\n    result.push(main[i + start_i]);\n    i += 1;\n  }\n\n  while (j < len_r) {\n    result.push(main[j + mid_i]);\n    j += 1;\n  }\n\n  console.log(\"Main Before:\", main);\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n  console.log(\"Result:\", result);\n  console.log(\"Main:\", main);\n  console.log(\"Animations:\", animations);\n  console.log(\" \");\n  return main;\n}\n\nexport default mergesort;\n\nfunction test() {\n  var test1 = [];\n  var test2 = [];\n\n  for (var i = 0; i < 20; i++) {\n    test1 = [];\n    test2 = [];\n\n    for (var j = 0; j < getRandomInt(1, 20); j++) {\n      var num = getRandomInt(0, 100);\n      test1.push(num);\n      test2.push(num);\n    } //console.log(\"MergeSorted:\",mergesort(test2,0,test2.length));\n\n\n    console.log(JSON.stringify(mergesort(test2, 0, test2.length, [])) === JSON.stringify(test1.sort((a, b) => a - b)));\n  }\n}\n\nfunction partial_test() {\n  var test1 = [21, 5, 24, 29, 44, 3, 7];\n  var test2 = [21, 5, 24, 29, 44, 3, 7]; //console.log(mergesort(test2,0,7));\n\n  console.log(JSON.stringify(mergesort(test2, 0, test2.length, [])) === JSON.stringify(test1.sort((a, b) => a - b))); //console.log(merge([-100,22,50,70,40,88,199,2000],0,4,8));\n} //test();\n//partial_test();\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n/*\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n\n\n  var len_i = Math.floor(i.length / 2);\n\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n*/","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["run_mergesort","bar_list","animations","arr","i","length","push","console","log","mergesort","start","end","length_of_list","Math","floor","slice","JSON","parse","stringify","merge","main","start_i","mid_i","end_i","len_l","len_r","j","k","result","Array","prototype","splice","apply","concat","test","test1","test2","getRandomInt","num","sort","a","b","partial_test","min","max","random"],"mappings":"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","sourcesContent":["\n\nfunction run_mergesort(bar_list){\n    var animations = [];\n    var arr = []\n    for (var i = 0; i < bar_list.length; i++) {\n      arr.push(bar_list[i]['len'])\n    }\n    console.log(arr);\n    //var sorted = mergesort(bar_list,)\n}\n\nfunction mergesort(i, start, end, animations) {\n\n  if (end - start === 1){\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n\n  console.log(i);\n  //console.log(\"Length: \",length_of_list);\n  console.log(\"Start: \",start, \" End: \", end);\n  console.log(\"Sliced:\", i.slice(start,end));\n  console.log(\" \");\n\n\n  i = mergesort(JSON.parse(JSON.stringify(i)), start, start + length_of_list, animations);\n  i = mergesort(JSON.parse(JSON.stringify(i)), start + length_of_list, end, animations);\n\n  i = merge(JSON.parse(JSON.stringify(i)), start, start + length_of_list, end, animations);\n\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i, animations) {\n\n\n  console.log(\"Real:\",main);\n  console.log(\"Left:\",main.slice(start_i,mid_i));\n  console.log(\"Right:\",main.slice(mid_i,end_i));\n\n\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i < (len_l) & j < (len_r)){\n    console.log(main[i + start_i], 'compared to', main[j + mid_i]);\n    //animations.push([i + start_i, j + mid_i, 0])\n\n    if (main[i + start_i] <= main[j + mid_i]) {\n      result.push(main[i + start_i]);\n      animations.push([i + start_i, j + mid_i, 1])\n      i += 1;\n    } else {\n      result.push(main[j + mid_i]);\n      animations.push([i + start_i, j + mid_i, 1])\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i < len_l){\n    result.push(main[i+start_i]);\n    i += 1;\n  }\n  while (j < len_r){\n    result.push(main[j + mid_i]);\n    j += 1;\n  }\n\n  console.log(\"Main Before:\",main);\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n\n  console.log(\"Result:\",result);\n  console.log(\"Main:\",main);\n  console.log(\"Animations:\", animations);\n  console.log(\" \");\n\n  return main;\n}\n\nexport default mergesort;\n\n\nfunction test(){\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 20; i++) {\n    test1 = []\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1,20); j++) {\n      var num = getRandomInt(0,100)\n      test1.push(num);\n      test2.push(num);\n    }\n\n    //console.log(\"MergeSorted:\",mergesort(test2,0,test2.length));\n    console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))===JSON.stringify(test1.sort((a,b) => a-b)));\n\n }\n\n}\n\nfunction partial_test(){\n  var test1 = [21,5,24,29,44,3,7];\n  var test2 = [21,5,24,29,44,3,7];\n  //console.log(mergesort(test2,0,7));\n  console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))===JSON.stringify(test1.sort((a,b) => a-b)));\n\n  //console.log(merge([-100,22,50,70,40,88,199,2000],0,4,8));\n\n}\n\n//test();\n//partial_test();\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nfunction mergesort(i) {\n\n  if (i.length < 2){\n    return i\n  }\n\n\n  var len_i = Math.floor(i.length / 2);\n\n  var left = i.slice(0,len_i);\n  var right = i.slice(len_i);\n\n\n  var left = mergesort(left);\n  var right = mergesort(right);\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n\n  var len_l = left.length - 1;\n  var len_r = right.length - 1;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n\n  while (i <= (len_l) & j <= (len_r)){\n\n    if (left[i] <= right[j]) {\n      result.push(left[i]);\n      i += 1;\n    } else {\n      result.push(right[j]);\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i <= len_l){\n    result.push(left[i]);\n    i += 1;\n  }\n  while (j <= len_r){\n    result.push(right[j]);\n    j += 1;\n  }\n  return result;\n}\n\n\n\nexport default mergesort;\n*/\n"]},"metadata":{},"sourceType":"module"}