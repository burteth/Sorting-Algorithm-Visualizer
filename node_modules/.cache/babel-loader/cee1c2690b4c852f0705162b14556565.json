{"ast":null,"code":"function run_mergesort(bar_list) {\n  var animations = [];\n  var arr = [];\n\n  for (var i = 0; i < bar_list.length; i++) {\n    arr.push(bar_list[i][\"len\"]);\n  }\n\n  var sorted = mergesort(arr, 0, arr.length, animations);\n  animations.push([animations[-1][0], animations[-1][1], \"end\"]);\n  return [sorted, animations];\n}\n\nexport default run_mergesort;\n\nfunction mergesort(i, start, end, animations) {\n  if (end - start === 1) {\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n  /*\n  console.log(i);\n  //console.log(\"Length: \",length_of_list);\n  console.log(\"Start: \", start, \" End: \", end);\n  console.log(\"Sliced:\", i.slice(start, end));\n  console.log(\" \");\n  */\n\n  i = mergesort(JSON.parse(JSON.stringify(i)), start, start + length_of_list, animations);\n  i = mergesort(JSON.parse(JSON.stringify(i)), start + length_of_list, end, animations);\n  i = merge(JSON.parse(JSON.stringify(i)), start, start + length_of_list, end, animations);\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i, animations) {\n  /*\n  console.log(\"Real:\", main);\n  console.log(\"Left:\", main.slice(start_i, mid_i));\n  console.log(\"Right:\", main.slice(mid_i, end_i));\n  */\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var result = [];\n  var shift_count = 0;\n\n  while (i < len_l & j < len_r) {\n    //console.log(main[i + start_i], \"compared to\", main[j + mid_i]);\n    //animations.push([i + start_i, j + mid_i, 0])\n\n    /*\n     * Animations Array Items:\n     *    1. first index to compare\n     *    2. second index to compare\n     *    3. if to swap or not\n     */\n    if (main[i + start_i] <= main[j + mid_i]) {\n      result.push(main[i + start_i]);\n      animations.push([i + start_i, j + mid_i, \"compare\"]);\n      i += 1;\n    } else {\n      result.push(main[j + mid_i]);\n      animations.push([i + start_i + shift_count, j + mid_i, \"mergesort swap\"]);\n      shift_count += 1;\n      j += 1;\n    }\n\n    k += 1;\n  }\n\n  while (i < len_l) {\n    result.push(main[i + start_i]);\n    i += 1;\n  }\n\n  while (j < len_r) {\n    result.push(main[j + mid_i]);\n    j += 1;\n  } //console.log(\"Main Before:\", main);\n\n\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n  /*\n  console.log(\"Result:\", result);\n  console.log(\"Main:\", main);\n  console.log(\"Animations:\", animations);\n  console.log(\" \");\n  */\n\n  return main;\n}\n\nfunction test() {\n  var test1 = [];\n  var test2 = [];\n\n  for (var i = 0; i < 20; i++) {\n    test1 = [];\n    test2 = [];\n\n    for (var j = 0; j < getRandomInt(1, 20); j++) {\n      var num = getRandomInt(0, 100);\n      test1.push(num);\n      test2.push(num);\n    } //console.log(\"MergeSorted:\",mergesort(test2,0,test2.length));\n    //console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))===JSON.stringify(test1.sort((a,b) => a-b)));\n\n  }\n}\n\nfunction partial_test() {\n  var test1 = [21, 5, 24, 29, 44, 3, 7];\n  var test2 = [21, 5, 24, 29, 44, 3, 7]; //console.log(mergesort(test2,0,7));\n  //console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))===JSON.stringify(test1.sort((a,b) => a-b)));\n  //console.log(merge([-100,22,50,70,40,88,199,2000],0,4,8));\n} //test();\n//partial_test();\n\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/MergeSort.js"],"names":["run_mergesort","bar_list","animations","arr","i","length","push","sorted","mergesort","start","end","length_of_list","Math","floor","JSON","parse","stringify","merge","main","start_i","mid_i","end_i","len_l","len_r","j","k","result","shift_count","Array","prototype","splice","apply","concat","test","test1","test2","getRandomInt","num","partial_test","min","max","random"],"mappings":"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","sourcesContent":["function run_mergesort(bar_list) {\n  var animations = [];\n  var arr = [];\n  for (var i = 0; i < bar_list.length; i++) {\n    arr.push(bar_list[i][\"len\"]);\n  }\n  var sorted = mergesort(arr, 0, arr.length, animations);\n  animations.push([animations[-1][0], animations[-1][1], \"end\"])\n  return [sorted, animations];\n}\nexport default run_mergesort;\n\nfunction mergesort(i, start, end, animations) {\n  if (end - start === 1) {\n    return i;\n  }\n\n  var length_of_list = Math.floor((end - start) / 2);\n\n  /*\n  console.log(i);\n  //console.log(\"Length: \",length_of_list);\n  console.log(\"Start: \", start, \" End: \", end);\n  console.log(\"Sliced:\", i.slice(start, end));\n  console.log(\" \");\n  */\n  i = mergesort(\n    JSON.parse(JSON.stringify(i)),\n    start,\n    start + length_of_list,\n    animations\n  );\n  i = mergesort(\n    JSON.parse(JSON.stringify(i)),\n    start + length_of_list,\n    end,\n    animations\n  );\n\n  i = merge(\n    JSON.parse(JSON.stringify(i)),\n    start,\n    start + length_of_list,\n    end,\n    animations\n  );\n\n  return i;\n}\n\nfunction merge(main, start_i, mid_i, end_i, animations) {\n  /*\n  console.log(\"Real:\", main);\n  console.log(\"Left:\", main.slice(start_i, mid_i));\n  console.log(\"Right:\", main.slice(mid_i, end_i));\n  */\n  var len_l = mid_i - start_i;\n  var len_r = end_i - mid_i;\n\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\n  var result = [];\n  var shift_count = 0;\n\n  while ((i < len_l) & (j < len_r)) {\n    //console.log(main[i + start_i], \"compared to\", main[j + mid_i]);\n    //animations.push([i + start_i, j + mid_i, 0])\n\n    /*\n     * Animations Array Items:\n     *    1. first index to compare\n     *    2. second index to compare\n     *    3. if to swap or not\n     */\n\n    if (main[i + start_i] <= main[j + mid_i]) {\n      result.push(main[i + start_i]);\n      animations.push([i + start_i, j + mid_i, \"compare\"])\n      i += 1;\n    } else {\n      result.push(main[j + mid_i]);\n      animations.push([i + start_i + shift_count, j + mid_i, \"mergesort swap\"])\n      shift_count += 1;\n      j += 1;\n    }\n    k += 1;\n  }\n\n  while (i < len_l) {\n    result.push(main[i + start_i]);\n    i += 1;\n  }\n  while (j < len_r) {\n    result.push(main[j + mid_i]);\n    j += 1;\n  }\n\n  //console.log(\"Main Before:\", main);\n  Array.prototype.splice.apply(main, [start_i, result.length].concat(result));\n\n  /*\n  console.log(\"Result:\", result);\n  console.log(\"Main:\", main);\n  console.log(\"Animations:\", animations);\n  console.log(\" \");\n  */\n\n  return main;\n}\n\nfunction test() {\n  var test1 = [];\n  var test2 = [];\n  for (var i = 0; i < 20; i++) {\n    test1 = [];\n    test2 = [];\n    for (var j = 0; j < getRandomInt(1, 20); j++) {\n      var num = getRandomInt(0, 100);\n      test1.push(num);\n      test2.push(num);\n    }\n\n    //console.log(\"MergeSorted:\",mergesort(test2,0,test2.length));\n    //console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))===JSON.stringify(test1.sort((a,b) => a-b)));\n  }\n}\n\nfunction partial_test() {\n  var test1 = [21, 5, 24, 29, 44, 3, 7];\n  var test2 = [21, 5, 24, 29, 44, 3, 7];\n  //console.log(mergesort(test2,0,7));\n  //console.log(JSON.stringify(mergesort(test2,0,test2.length,[]))===JSON.stringify(test1.sort((a,b) => a-b)));\n\n  //console.log(merge([-100,22,50,70,40,88,199,2000],0,4,8));\n}\n\n//test();\n//partial_test();\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n"]},"metadata":{},"sourceType":"module"}