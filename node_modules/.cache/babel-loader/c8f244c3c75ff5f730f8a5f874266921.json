{"ast":null,"code":"function run_heapsort(bar_list) {\n  var values = [];\n  var animations = [];\n\n  for (var i = 0; i < bar_list.length; i++) {\n    //creates an array of just the lengths of the bars\n    values.push(bar_list[i][\"len\"]);\n  }\n\n  create_heap(values, animations); //console.log(\"Heap Created:\",a);\n\n  for (var i = values.length - 1; i > 0; i--) {\n    //console.log(\"Heap at\",i,\":\",a);\n    animations.push([i, 0, \"swap\"]);\n    swap(values, i, 0);\n    heapify(values, i, 0, animations);\n  } //console.log(animations);\n\n\n  return animations;\n}\n\nexport default run_heapsort;\n\nfunction heapify(heap, n, index, animations) {\n  var largest = index;\n  var left = 2 * index + 1;\n  var right = 2 * index + 2; //console.log(\"Comparing\",heap[left],\"and\",heap[largest]);\n  //console.log(\"test:\",left, \"<\", n);\n  //animations.push([left,largest,\"compare\"])\n\n  if (left < n) {\n    animations.push([left, largest, \"compare\"]);\n\n    if (heap[left] > heap[largest]) {\n      largest = left;\n    }\n  }\n\n  if (right < n) {\n    animations.push([right, largest, \"compare\"]);\n\n    if (heap[right] > heap[largest]) {\n      largest = right;\n    }\n  }\n\n  if (largest !== index) {\n    animations.push([largest, index, \"swap\"]);\n    swap(heap, largest, index);\n    heapify(heap, n, largest, animations);\n  }\n}\n\nfunction create_heap(heap, animations) {\n  var len_heap = heap.length;\n  var start_index = Math.floor(len_heap / 2 - 1);\n\n  for (var i = start_index; i > -1; i--) {\n    heapify(heap, len_heap, i, animations);\n  }\n}\n\nfunction get_parent_index(heap, index) {\n  return Math.ceil((index - 1) / 2);\n}\n\nfunction swap(input, index_A, index_B) {\n  var temp = input[index_A];\n  input[index_A] = input[index_B];\n  input[index_B] = temp;\n}\n\nfunction test() {\n  var test1 = [10, 90, 8, 71, 6, 57, 400, 16, 21, 1]; //console.log(test1);\n\n  run_heapsort(test1); //console.log(test1);\n}\n\ntest();","map":{"version":3,"sources":["/Users/ethanburt/Desktop/Coding/Projects/Sorting_Algorithm_Visualizer/src/components/HeapSort.js"],"names":["run_heapsort","bar_list","values","animations","i","length","push","create_heap","swap","heapify","heap","n","index","largest","left","right","len_heap","start_index","Math","floor","get_parent_index","ceil","input","index_A","index_B","temp","test","test1"],"mappings":"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","sourcesContent":["\nfunction run_heapsort(bar_list){\n    var values = [];\n    var animations = [];\n\n    for (var i = 0; i < bar_list.length; i++) {\n      //creates an array of just the lengths of the bars\n      values.push(bar_list[i][\"len\"]);\n    }\n\n    create_heap(values, animations);\n\n    //console.log(\"Heap Created:\",a);\n\n    for (var i = values.length - 1; i > 0; i--) {\n      //console.log(\"Heap at\",i,\":\",a);\n      animations.push([i,0,\"swap\"])\n      swap(values,i,0);\n      heapify(values,i,0, animations);\n    }\n\n    //console.log(animations);\n    return animations;\n}\nexport default run_heapsort;\n\n\n\nfunction heapify(heap, n, index, animations){\n\n\n  var largest = index;\n  var left = 2 * index + 1;\n  var right = 2 * index + 2;\n  //console.log(\"Comparing\",heap[left],\"and\",heap[largest]);\n  //console.log(\"test:\",left, \"<\", n);\n  //animations.push([left,largest,\"compare\"])\n  if (left < n){\n    animations.push([left,largest,\"compare\"])\n    if (heap[left] > heap[largest]){\n      largest = left\n    }\n  }\n\n  if (right < n){\n    animations.push([right,largest,\"compare\"])\n    if (heap[right] > heap[largest]){\n      largest = right\n    }\n  }\n\n  if (largest !== index){\n    animations.push([largest, index,\"swap\"])\n    swap(heap, largest, index);\n    heapify(heap, n, largest, animations)\n  }\n\n}\n\nfunction create_heap(heap, animations){\n\n  var len_heap = heap.length;\n\n  var start_index = Math.floor(len_heap / 2 - 1)\n\n  for (var i = start_index; i > -1; i--) {\n    heapify(heap, len_heap, i, animations);\n  }\n\n}\n\n\n\nfunction get_parent_index(heap,index){\n    return(Math.ceil((index - 1) / 2));\n}\nfunction swap(input, index_A, index_B) {\n   var temp = input[index_A];\n\n   input[index_A] = input[index_B];\n   input[index_B] = temp;\n}\n\n\n\n\nfunction test(){\n\n  var test1 = [10,90,8,71,6,57,400,16,21,1]\n  //console.log(test1);\n  run_heapsort(test1);\n  //console.log(test1);\n\n\n}\ntest()\n"]},"metadata":{},"sourceType":"module"}